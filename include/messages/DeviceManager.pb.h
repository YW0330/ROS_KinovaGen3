// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DeviceManager.proto

#ifndef PROTOBUF_DeviceManager_2eproto__INCLUDED
#define PROTOBUF_DeviceManager_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_DeviceManager_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsDeviceHandlesImpl();
void InitDefaultsDeviceHandles();
inline void InitDefaults() {
  InitDefaultsDeviceHandles();
}
}  // namespace protobuf_DeviceManager_2eproto
namespace Kinova {
namespace Api {
namespace DeviceManager {
class DeviceHandles;
class DeviceHandlesDefaultTypeInternal;
extern DeviceHandlesDefaultTypeInternal _DeviceHandles_default_instance_;
}  // namespace DeviceManager
}  // namespace Api
}  // namespace Kinova
namespace Kinova {
namespace Api {
namespace DeviceManager {

enum ServiceVersion {
  RESERVED_0 = 0,
  CURRENT_VERSION = 1,
  ServiceVersion_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServiceVersion_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServiceVersion_IsValid(int value);
const ServiceVersion ServiceVersion_MIN = RESERVED_0;
const ServiceVersion ServiceVersion_MAX = CURRENT_VERSION;
const int ServiceVersion_ARRAYSIZE = ServiceVersion_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServiceVersion_descriptor();
inline const ::std::string& ServiceVersion_Name(ServiceVersion value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServiceVersion_descriptor(), value);
}
inline bool ServiceVersion_Parse(
    const ::std::string& name, ServiceVersion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServiceVersion>(
    ServiceVersion_descriptor(), name, value);
}
// ===================================================================

class DeviceHandles : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Kinova.Api.DeviceManager.DeviceHandles) */ {
 public:
  DeviceHandles();
  virtual ~DeviceHandles();

  DeviceHandles(const DeviceHandles& from);

  inline DeviceHandles& operator=(const DeviceHandles& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceHandles(DeviceHandles&& from) noexcept
    : DeviceHandles() {
    *this = ::std::move(from);
  }

  inline DeviceHandles& operator=(DeviceHandles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceHandles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceHandles* internal_default_instance() {
    return reinterpret_cast<const DeviceHandles*>(
               &_DeviceHandles_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DeviceHandles* other);
  friend void swap(DeviceHandles& a, DeviceHandles& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceHandles* New() const PROTOBUF_FINAL { return New(NULL); }

  DeviceHandles* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeviceHandles& from);
  void MergeFrom(const DeviceHandles& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeviceHandles* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Kinova.Api.Common.DeviceHandle device_handle = 1;
  int device_handle_size() const;
  void clear_device_handle();
  static const int kDeviceHandleFieldNumber = 1;
  const ::Kinova::Api::Common::DeviceHandle& device_handle(int index) const;
  ::Kinova::Api::Common::DeviceHandle* mutable_device_handle(int index);
  ::Kinova::Api::Common::DeviceHandle* add_device_handle();
  ::google::protobuf::RepeatedPtrField< ::Kinova::Api::Common::DeviceHandle >*
      mutable_device_handle();
  const ::google::protobuf::RepeatedPtrField< ::Kinova::Api::Common::DeviceHandle >&
      device_handle() const;

  // @@protoc_insertion_point(class_scope:Kinova.Api.DeviceManager.DeviceHandles)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Kinova::Api::Common::DeviceHandle > device_handle_;
  mutable int _cached_size_;
  friend struct ::protobuf_DeviceManager_2eproto::TableStruct;
  friend void ::protobuf_DeviceManager_2eproto::InitDefaultsDeviceHandlesImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeviceHandles

// repeated .Kinova.Api.Common.DeviceHandle device_handle = 1;
inline int DeviceHandles::device_handle_size() const {
  return device_handle_.size();
}
inline const ::Kinova::Api::Common::DeviceHandle& DeviceHandles::device_handle(int index) const {
  // @@protoc_insertion_point(field_get:Kinova.Api.DeviceManager.DeviceHandles.device_handle)
  return device_handle_.Get(index);
}
inline ::Kinova::Api::Common::DeviceHandle* DeviceHandles::mutable_device_handle(int index) {
  // @@protoc_insertion_point(field_mutable:Kinova.Api.DeviceManager.DeviceHandles.device_handle)
  return device_handle_.Mutable(index);
}
inline ::Kinova::Api::Common::DeviceHandle* DeviceHandles::add_device_handle() {
  // @@protoc_insertion_point(field_add:Kinova.Api.DeviceManager.DeviceHandles.device_handle)
  return device_handle_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Kinova::Api::Common::DeviceHandle >*
DeviceHandles::mutable_device_handle() {
  // @@protoc_insertion_point(field_mutable_list:Kinova.Api.DeviceManager.DeviceHandles.device_handle)
  return &device_handle_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Kinova::Api::Common::DeviceHandle >&
DeviceHandles::device_handle() const {
  // @@protoc_insertion_point(field_list:Kinova.Api.DeviceManager.DeviceHandles.device_handle)
  return device_handle_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace DeviceManager
}  // namespace Api
}  // namespace Kinova

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Kinova::Api::DeviceManager::ServiceVersion> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Kinova::Api::DeviceManager::ServiceVersion>() {
  return ::Kinova::Api::DeviceManager::ServiceVersion_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DeviceManager_2eproto__INCLUDED
