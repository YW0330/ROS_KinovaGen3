// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GripperConfig.proto

#ifndef PROTOBUF_GripperConfig_2eproto__INCLUDED
#define PROTOBUF_GripperConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include "Common.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_GripperConfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
inline void InitDefaults() {
}
}  // namespace protobuf_GripperConfig_2eproto
namespace Kinova {
namespace Api {
namespace GripperConfig {
}  // namespace GripperConfig
}  // namespace Api
}  // namespace Kinova
namespace Kinova {
namespace Api {
namespace GripperConfig {

enum SafetyIdentifier {
  UNSPECIFIED_ACTUATOR_SAFETY_IDENTIFIER = 0,
  MAXIMUM_MOTOR_CURRENT = 1,
  MAXIMUM_VOLTAGE = 2,
  MINIMUM_VOLTAGE = 4,
  MAXIMUM_MOTOR_TEMPERATURE = 8,
  MAXIMUM_CORE_TEMPERATURE = 16,
  NON_VOLATILE_MEMORY_CORRUPTED = 32,
  EMERGENCY_LINE_ASSERTED = 64,
  COMMUNICATION_TICK_LOST = 128,
  WATCHDOG_TRIGGERED = 256,
  SafetyIdentifier_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SafetyIdentifier_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SafetyIdentifier_IsValid(int value);
const SafetyIdentifier SafetyIdentifier_MIN = UNSPECIFIED_ACTUATOR_SAFETY_IDENTIFIER;
const SafetyIdentifier SafetyIdentifier_MAX = WATCHDOG_TRIGGERED;
const int SafetyIdentifier_ARRAYSIZE = SafetyIdentifier_MAX + 1;

const ::google::protobuf::EnumDescriptor* SafetyIdentifier_descriptor();
inline const ::std::string& SafetyIdentifier_Name(SafetyIdentifier value) {
  return ::google::protobuf::internal::NameOfEnum(
    SafetyIdentifier_descriptor(), value);
}
inline bool SafetyIdentifier_Parse(
    const ::std::string& name, SafetyIdentifier* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SafetyIdentifier>(
    SafetyIdentifier_descriptor(), name, value);
}
enum RobotiqGripperStatusFlags {
  UNSPECIFIED_ROBOTIQ_STATUS = 0,
  ROBOTIQ_STAT_INITIALIZED = 1,
  ROBOTIQ_STAT_OBJECT_DETECTED = 2,
  ROBOTIQ_STAT_POS_REACHED = 4,
  ROBOTIQ_STAT_STOPPED = 8,
  RobotiqGripperStatusFlags_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RobotiqGripperStatusFlags_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RobotiqGripperStatusFlags_IsValid(int value);
const RobotiqGripperStatusFlags RobotiqGripperStatusFlags_MIN = UNSPECIFIED_ROBOTIQ_STATUS;
const RobotiqGripperStatusFlags RobotiqGripperStatusFlags_MAX = ROBOTIQ_STAT_STOPPED;
const int RobotiqGripperStatusFlags_ARRAYSIZE = RobotiqGripperStatusFlags_MAX + 1;

const ::google::protobuf::EnumDescriptor* RobotiqGripperStatusFlags_descriptor();
inline const ::std::string& RobotiqGripperStatusFlags_Name(RobotiqGripperStatusFlags value) {
  return ::google::protobuf::internal::NameOfEnum(
    RobotiqGripperStatusFlags_descriptor(), value);
}
inline bool RobotiqGripperStatusFlags_Parse(
    const ::std::string& name, RobotiqGripperStatusFlags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RobotiqGripperStatusFlags>(
    RobotiqGripperStatusFlags_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace GripperConfig
}  // namespace Api
}  // namespace Kinova

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Kinova::Api::GripperConfig::SafetyIdentifier> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Kinova::Api::GripperConfig::SafetyIdentifier>() {
  return ::Kinova::Api::GripperConfig::SafetyIdentifier_descriptor();
}
template <> struct is_proto_enum< ::Kinova::Api::GripperConfig::RobotiqGripperStatusFlags> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Kinova::Api::GripperConfig::RobotiqGripperStatusFlags>() {
  return ::Kinova::Api::GripperConfig::RobotiqGripperStatusFlags_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GripperConfig_2eproto__INCLUDED
