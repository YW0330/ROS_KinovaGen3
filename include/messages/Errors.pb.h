// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Errors.proto

#ifndef PROTOBUF_Errors_2eproto__INCLUDED
#define PROTOBUF_Errors_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace protobuf_Errors_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
inline void InitDefaults() {
}
}  // namespace protobuf_Errors_2eproto
namespace Kinova {
namespace Api {
}  // namespace Api
}  // namespace Kinova
namespace Kinova {
namespace Api {

enum ErrorCodes {
  ERROR_NONE = 0,
  ERROR_PROTOCOL_SERVER = 1,
  ERROR_PROTOCOL_CLIENT = 2,
  ERROR_DEVICE = 3,
  ERROR_INTERNAL = 4,
  ErrorCodes_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ErrorCodes_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ErrorCodes_IsValid(int value);
const ErrorCodes ErrorCodes_MIN = ERROR_NONE;
const ErrorCodes ErrorCodes_MAX = ERROR_INTERNAL;
const int ErrorCodes_ARRAYSIZE = ErrorCodes_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCodes_descriptor();
inline const ::std::string& ErrorCodes_Name(ErrorCodes value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCodes_descriptor(), value);
}
inline bool ErrorCodes_Parse(
    const ::std::string& name, ErrorCodes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCodes>(
    ErrorCodes_descriptor(), name, value);
}
enum SubErrorCodes {
  SUB_ERROR_NONE = 0,
  METHOD_FAILED = 1,
  UNIMPLEMENTED = 2,
  INVALID_PARAM = 3,
  UNSUPPORTED_SERVICE = 4,
  UNSUPPORTED_METHOD = 5,
  TOO_LARGE_ENCODED_FRAME_BUFFER = 6,
  FRAME_ENCODING_ERR = 7,
  FRAME_DECODING_ERR = 8,
  INCOMPATIBLE_HEADER_VERSION = 9,
  UNSUPPORTED_FRAME_TYPE = 10,
  UNREGISTERED_NOTIFICATION_RECEIVED = 11,
  INVALID_SESSION = 12,
  PAYLOAD_DECODING_ERR = 13,
  UNREGISTERED_FRAME_RECEIVED = 14,
  INVALID_PASSWORD = 15,
  USER_NOT_FOUND = 16,
  ENTITY_NOT_FOUND = 17,
  ROBOT_MOVEMENT_IN_PROGRESS = 18,
  ROBOT_NOT_MOVING = 19,
  NO_MORE_STORAGE_SPACE = 20,
  ROBOT_NOT_READY = 21,
  ROBOT_IN_FAULT = 22,
  ROBOT_IN_MAINTENANCE = 23,
  ROBOT_IN_UPDATE_MODE = 24,
  ROBOT_IN_EMERGENCY_STOP = 25,
  SINGLE_LEVEL_SERVOING = 26,
  LOW_LEVEL_SERVOING = 27,
  MAPPING_GROUP_NON_ROOT = 28,
  MAPPING_INVALID_GROUP = 29,
  MAPPING_INVALID_MAP = 30,
  MAP_GROUP_INVALID_MAP = 31,
  MAP_GROUP_INVALID_PARENT = 32,
  MAP_GROUP_INVALID_CHILD = 33,
  MAP_GROUP_INVALID_MOVE = 34,
  MAP_IN_USE = 35,
  WIFI_CONNECT_ERROR = 36,
  UNSUPPORTED_NETWORK_TYPE = 37,
  TOO_LARGE_ENCODED_PAYLOAD_BUFFER = 38,
  UPDATE_PERMISSION_DENIED = 39,
  DELETE_PERMISSION_DENIED = 40,
  DATABASE_ERROR = 41,
  UNSUPPORTED_OPTION = 42,
  UNSUPPORTED_RESOLUTION = 43,
  UNSUPPORTED_FRAME_RATE = 44,
  UNSUPPORTED_BIT_RATE = 45,
  UNSUPPORTED_ACTION = 46,
  UNSUPPORTED_FOCUS_ACTION = 47,
  VALUE_IS_ABOVE_MAXIMUM = 48,
  VALUE_IS_BELOW_MINIMUM = 49,
  DEVICE_DISCONNECTED = 50,
  DEVICE_NOT_READY = 51,
  INVALID_DEVICE = 52,
  SAFETY_THRESHOLD_REACHED = 53,
  INVALID_USER_SESSION_ACCESS = 54,
  CONTROL_MANUAL_STOP = 55,
  CONTROL_OUTSIDE_WORKSPACE = 56,
  CONTROL_ACTUATOR_COUNT_MISMATCH = 57,
  CONTROL_INVALID_DURATION = 58,
  CONTROL_INVALID_SPEED = 59,
  CONTROL_LARGE_SPEED = 60,
  CONTROL_INVALID_ACCELERATION = 61,
  CONTROL_INVALID_TIME_STEP = 62,
  CONTROL_LARGE_SIZE = 63,
  CONTROL_WRONG_MODE = 64,
  CONTROL_JOINT_POSITION_LIMIT = 65,
  CONTROL_NO_FILE_IN_MEMORY = 66,
  CONTROL_INDEX_OUT_OF_TRAJECTORY = 67,
  CONTROL_ALREADY_RUNNING = 68,
  CONTROL_WRONG_STARTING_POINT = 69,
  CONTROL_CARTESIAN_CANNOT_START = 70,
  CONTROL_UNDEFINED_CONSTRAINT = 71,
  CONTROL_UNINITIALIZED = 72,
  CONTROL_NO_ACTION = 73,
  CONTROL_UNDEFINED = 74,
  WRONG_SERVOING_MODE = 75,
  CONTROL_WRONG_STARTING_SPEED = 76,
  USERNAME_LENGTH_EXCEEDED = 100,
  FIRSTNAME_LENGTH_EXCEEDED = 101,
  LASTNAME_LENGTH_EXCEEDED = 102,
  PASSWORD_LENGTH_EXCEEDED = 103,
  USERNAME_ALREADY_EXISTS = 104,
  USERNAME_EMPTY = 105,
  PASSWORD_NOT_CHANGED = 106,
  MAXIMUM_USER_PROFILES_USED = 107,
  ROUTER_UNVAILABLE = 108,
  ADDRESS_NOT_IN_VALID_RANGE = 120,
  ADDRESS_NOT_CONFIGURABLE = 121,
  SESSION_NOT_IN_CONTROL = 130,
  METHOD_TIMEOUT = 131,
  UNSUPPORTED_ROBOT_CONFIGURATION = 132,
  NVRAM_READ_FAIL = 133,
  NVRAM_WRITE_FAIL = 134,
  NETWORK_NO_ADDRESS_ASSIGNED = 135,
  READ_PERMISSION_DENIED = 136,
  CONTROLLER_INVALID_MAPPING = 137,
  ACTION_IN_USE = 138,
  SEND_FAILED = 139,
  CONTROL_WAYPOINT_TRAJECTORY_ABORTED = 140,
  CONTROL_PERMISSION_DENIED = 141,
  SubErrorCodes_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SubErrorCodes_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SubErrorCodes_IsValid(int value);
const SubErrorCodes SubErrorCodes_MIN = SUB_ERROR_NONE;
const SubErrorCodes SubErrorCodes_MAX = CONTROL_PERMISSION_DENIED;
const int SubErrorCodes_ARRAYSIZE = SubErrorCodes_MAX + 1;

const ::google::protobuf::EnumDescriptor* SubErrorCodes_descriptor();
inline const ::std::string& SubErrorCodes_Name(SubErrorCodes value) {
  return ::google::protobuf::internal::NameOfEnum(
    SubErrorCodes_descriptor(), value);
}
inline bool SubErrorCodes_Parse(
    const ::std::string& name, SubErrorCodes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SubErrorCodes>(
    SubErrorCodes_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Api
}  // namespace Kinova

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Kinova::Api::ErrorCodes> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Kinova::Api::ErrorCodes>() {
  return ::Kinova::Api::ErrorCodes_descriptor();
}
template <> struct is_proto_enum< ::Kinova::Api::SubErrorCodes> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Kinova::Api::SubErrorCodes>() {
  return ::Kinova::Api::SubErrorCodes_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Errors_2eproto__INCLUDED
