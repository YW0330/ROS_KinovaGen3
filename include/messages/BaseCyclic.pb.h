// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BaseCyclic.proto

#ifndef PROTOBUF_BaseCyclic_2eproto__INCLUDED
#define PROTOBUF_BaseCyclic_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"  // IWYU pragma: export
#include "InterconnectCyclicMessage.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_BaseCyclic_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsActuatorCommandImpl();
void InitDefaultsActuatorCommand();
void InitDefaultsActuatorFeedbackImpl();
void InitDefaultsActuatorFeedback();
void InitDefaultsActuatorCustomDataImpl();
void InitDefaultsActuatorCustomData();
void InitDefaultsBaseFeedbackImpl();
void InitDefaultsBaseFeedback();
void InitDefaultsCustomDataImpl();
void InitDefaultsCustomData();
void InitDefaultsCommandImpl();
void InitDefaultsCommand();
void InitDefaultsFeedbackImpl();
void InitDefaultsFeedback();
inline void InitDefaults() {
  InitDefaultsActuatorCommand();
  InitDefaultsActuatorFeedback();
  InitDefaultsActuatorCustomData();
  InitDefaultsBaseFeedback();
  InitDefaultsCustomData();
  InitDefaultsCommand();
  InitDefaultsFeedback();
}
}  // namespace protobuf_BaseCyclic_2eproto
namespace Kinova {
namespace Api {
namespace BaseCyclic {
class ActuatorCommand;
class ActuatorCommandDefaultTypeInternal;
extern ActuatorCommandDefaultTypeInternal _ActuatorCommand_default_instance_;
class ActuatorCustomData;
class ActuatorCustomDataDefaultTypeInternal;
extern ActuatorCustomDataDefaultTypeInternal _ActuatorCustomData_default_instance_;
class ActuatorFeedback;
class ActuatorFeedbackDefaultTypeInternal;
extern ActuatorFeedbackDefaultTypeInternal _ActuatorFeedback_default_instance_;
class BaseFeedback;
class BaseFeedbackDefaultTypeInternal;
extern BaseFeedbackDefaultTypeInternal _BaseFeedback_default_instance_;
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class CustomData;
class CustomDataDefaultTypeInternal;
extern CustomDataDefaultTypeInternal _CustomData_default_instance_;
class Feedback;
class FeedbackDefaultTypeInternal;
extern FeedbackDefaultTypeInternal _Feedback_default_instance_;
}  // namespace BaseCyclic
}  // namespace Api
}  // namespace Kinova
namespace Kinova {
namespace Api {
namespace BaseCyclic {

enum ServiceVersion {
  RESERVED_0 = 0,
  CURRENT_VERSION = 1,
  ServiceVersion_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServiceVersion_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServiceVersion_IsValid(int value);
const ServiceVersion ServiceVersion_MIN = RESERVED_0;
const ServiceVersion ServiceVersion_MAX = CURRENT_VERSION;
const int ServiceVersion_ARRAYSIZE = ServiceVersion_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServiceVersion_descriptor();
inline const ::std::string& ServiceVersion_Name(ServiceVersion value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServiceVersion_descriptor(), value);
}
inline bool ServiceVersion_Parse(
    const ::std::string& name, ServiceVersion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServiceVersion>(
    ServiceVersion_descriptor(), name, value);
}
// ===================================================================

class ActuatorCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Kinova.Api.BaseCyclic.ActuatorCommand) */ {
 public:
  ActuatorCommand();
  virtual ~ActuatorCommand();

  ActuatorCommand(const ActuatorCommand& from);

  inline ActuatorCommand& operator=(const ActuatorCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActuatorCommand(ActuatorCommand&& from) noexcept
    : ActuatorCommand() {
    *this = ::std::move(from);
  }

  inline ActuatorCommand& operator=(ActuatorCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ActuatorCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActuatorCommand* internal_default_instance() {
    return reinterpret_cast<const ActuatorCommand*>(
               &_ActuatorCommand_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ActuatorCommand* other);
  friend void swap(ActuatorCommand& a, ActuatorCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActuatorCommand* New() const PROTOBUF_FINAL { return New(NULL); }

  ActuatorCommand* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ActuatorCommand& from);
  void MergeFrom(const ActuatorCommand& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ActuatorCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // fixed32 command_id = 1;
  void clear_command_id();
  static const int kCommandIdFieldNumber = 1;
  ::google::protobuf::uint32 command_id() const;
  void set_command_id(::google::protobuf::uint32 value);

  // fixed32 flags = 2;
  void clear_flags();
  static const int kFlagsFieldNumber = 2;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // float position = 3;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  float position() const;
  void set_position(float value);

  // float velocity = 4;
  void clear_velocity();
  static const int kVelocityFieldNumber = 4;
  float velocity() const;
  void set_velocity(float value);

  // float torque_joint = 5;
  void clear_torque_joint();
  static const int kTorqueJointFieldNumber = 5;
  float torque_joint() const;
  void set_torque_joint(float value);

  // float current_motor = 6;
  void clear_current_motor();
  static const int kCurrentMotorFieldNumber = 6;
  float current_motor() const;
  void set_current_motor(float value);

  // @@protoc_insertion_point(class_scope:Kinova.Api.BaseCyclic.ActuatorCommand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 command_id_;
  ::google::protobuf::uint32 flags_;
  float position_;
  float velocity_;
  float torque_joint_;
  float current_motor_;
  mutable int _cached_size_;
  friend struct ::protobuf_BaseCyclic_2eproto::TableStruct;
  friend void ::protobuf_BaseCyclic_2eproto::InitDefaultsActuatorCommandImpl();
};
// -------------------------------------------------------------------

class ActuatorFeedback : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Kinova.Api.BaseCyclic.ActuatorFeedback) */ {
 public:
  ActuatorFeedback();
  virtual ~ActuatorFeedback();

  ActuatorFeedback(const ActuatorFeedback& from);

  inline ActuatorFeedback& operator=(const ActuatorFeedback& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActuatorFeedback(ActuatorFeedback&& from) noexcept
    : ActuatorFeedback() {
    *this = ::std::move(from);
  }

  inline ActuatorFeedback& operator=(ActuatorFeedback&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ActuatorFeedback& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActuatorFeedback* internal_default_instance() {
    return reinterpret_cast<const ActuatorFeedback*>(
               &_ActuatorFeedback_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ActuatorFeedback* other);
  friend void swap(ActuatorFeedback& a, ActuatorFeedback& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActuatorFeedback* New() const PROTOBUF_FINAL { return New(NULL); }

  ActuatorFeedback* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ActuatorFeedback& from);
  void MergeFrom(const ActuatorFeedback& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ActuatorFeedback* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // fixed32 command_id = 1;
  void clear_command_id();
  static const int kCommandIdFieldNumber = 1;
  ::google::protobuf::uint32 command_id() const;
  void set_command_id(::google::protobuf::uint32 value);

  // fixed32 status_flags = 2;
  void clear_status_flags();
  static const int kStatusFlagsFieldNumber = 2;
  ::google::protobuf::uint32 status_flags() const;
  void set_status_flags(::google::protobuf::uint32 value);

  // fixed32 jitter_comm = 3;
  void clear_jitter_comm();
  static const int kJitterCommFieldNumber = 3;
  ::google::protobuf::uint32 jitter_comm() const;
  void set_jitter_comm(::google::protobuf::uint32 value);

  // float position = 4;
  void clear_position();
  static const int kPositionFieldNumber = 4;
  float position() const;
  void set_position(float value);

  // float velocity = 5;
  void clear_velocity();
  static const int kVelocityFieldNumber = 5;
  float velocity() const;
  void set_velocity(float value);

  // float torque = 6;
  void clear_torque();
  static const int kTorqueFieldNumber = 6;
  float torque() const;
  void set_torque(float value);

  // float current_motor = 7;
  void clear_current_motor();
  static const int kCurrentMotorFieldNumber = 7;
  float current_motor() const;
  void set_current_motor(float value);

  // float voltage = 8;
  void clear_voltage();
  static const int kVoltageFieldNumber = 8;
  float voltage() const;
  void set_voltage(float value);

  // float temperature_motor = 9;
  void clear_temperature_motor();
  static const int kTemperatureMotorFieldNumber = 9;
  float temperature_motor() const;
  void set_temperature_motor(float value);

  // float temperature_core = 10;
  void clear_temperature_core();
  static const int kTemperatureCoreFieldNumber = 10;
  float temperature_core() const;
  void set_temperature_core(float value);

  // fixed32 fault_bank_a = 11;
  void clear_fault_bank_a();
  static const int kFaultBankAFieldNumber = 11;
  ::google::protobuf::uint32 fault_bank_a() const;
  void set_fault_bank_a(::google::protobuf::uint32 value);

  // fixed32 fault_bank_b = 12;
  void clear_fault_bank_b();
  static const int kFaultBankBFieldNumber = 12;
  ::google::protobuf::uint32 fault_bank_b() const;
  void set_fault_bank_b(::google::protobuf::uint32 value);

  // fixed32 warning_bank_a = 13;
  void clear_warning_bank_a();
  static const int kWarningBankAFieldNumber = 13;
  ::google::protobuf::uint32 warning_bank_a() const;
  void set_warning_bank_a(::google::protobuf::uint32 value);

  // fixed32 warning_bank_b = 14;
  void clear_warning_bank_b();
  static const int kWarningBankBFieldNumber = 14;
  ::google::protobuf::uint32 warning_bank_b() const;
  void set_warning_bank_b(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Kinova.Api.BaseCyclic.ActuatorFeedback)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 command_id_;
  ::google::protobuf::uint32 status_flags_;
  ::google::protobuf::uint32 jitter_comm_;
  float position_;
  float velocity_;
  float torque_;
  float current_motor_;
  float voltage_;
  float temperature_motor_;
  float temperature_core_;
  ::google::protobuf::uint32 fault_bank_a_;
  ::google::protobuf::uint32 fault_bank_b_;
  ::google::protobuf::uint32 warning_bank_a_;
  ::google::protobuf::uint32 warning_bank_b_;
  mutable int _cached_size_;
  friend struct ::protobuf_BaseCyclic_2eproto::TableStruct;
  friend void ::protobuf_BaseCyclic_2eproto::InitDefaultsActuatorFeedbackImpl();
};
// -------------------------------------------------------------------

class ActuatorCustomData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Kinova.Api.BaseCyclic.ActuatorCustomData) */ {
 public:
  ActuatorCustomData();
  virtual ~ActuatorCustomData();

  ActuatorCustomData(const ActuatorCustomData& from);

  inline ActuatorCustomData& operator=(const ActuatorCustomData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActuatorCustomData(ActuatorCustomData&& from) noexcept
    : ActuatorCustomData() {
    *this = ::std::move(from);
  }

  inline ActuatorCustomData& operator=(ActuatorCustomData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ActuatorCustomData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActuatorCustomData* internal_default_instance() {
    return reinterpret_cast<const ActuatorCustomData*>(
               &_ActuatorCustomData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ActuatorCustomData* other);
  friend void swap(ActuatorCustomData& a, ActuatorCustomData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActuatorCustomData* New() const PROTOBUF_FINAL { return New(NULL); }

  ActuatorCustomData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ActuatorCustomData& from);
  void MergeFrom(const ActuatorCustomData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ActuatorCustomData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // fixed32 command_id = 1;
  void clear_command_id();
  static const int kCommandIdFieldNumber = 1;
  ::google::protobuf::uint32 command_id() const;
  void set_command_id(::google::protobuf::uint32 value);

  // fixed32 custom_data_0 = 2;
  void clear_custom_data_0();
  static const int kCustomData0FieldNumber = 2;
  ::google::protobuf::uint32 custom_data_0() const;
  void set_custom_data_0(::google::protobuf::uint32 value);

  // fixed32 custom_data_1 = 3;
  void clear_custom_data_1();
  static const int kCustomData1FieldNumber = 3;
  ::google::protobuf::uint32 custom_data_1() const;
  void set_custom_data_1(::google::protobuf::uint32 value);

  // fixed32 custom_data_2 = 4;
  void clear_custom_data_2();
  static const int kCustomData2FieldNumber = 4;
  ::google::protobuf::uint32 custom_data_2() const;
  void set_custom_data_2(::google::protobuf::uint32 value);

  // fixed32 custom_data_3 = 5;
  void clear_custom_data_3();
  static const int kCustomData3FieldNumber = 5;
  ::google::protobuf::uint32 custom_data_3() const;
  void set_custom_data_3(::google::protobuf::uint32 value);

  // fixed32 custom_data_4 = 6;
  void clear_custom_data_4();
  static const int kCustomData4FieldNumber = 6;
  ::google::protobuf::uint32 custom_data_4() const;
  void set_custom_data_4(::google::protobuf::uint32 value);

  // fixed32 custom_data_5 = 7;
  void clear_custom_data_5();
  static const int kCustomData5FieldNumber = 7;
  ::google::protobuf::uint32 custom_data_5() const;
  void set_custom_data_5(::google::protobuf::uint32 value);

  // fixed32 custom_data_6 = 8;
  void clear_custom_data_6();
  static const int kCustomData6FieldNumber = 8;
  ::google::protobuf::uint32 custom_data_6() const;
  void set_custom_data_6(::google::protobuf::uint32 value);

  // fixed32 custom_data_7 = 9;
  void clear_custom_data_7();
  static const int kCustomData7FieldNumber = 9;
  ::google::protobuf::uint32 custom_data_7() const;
  void set_custom_data_7(::google::protobuf::uint32 value);

  // fixed32 custom_data_8 = 10;
  void clear_custom_data_8();
  static const int kCustomData8FieldNumber = 10;
  ::google::protobuf::uint32 custom_data_8() const;
  void set_custom_data_8(::google::protobuf::uint32 value);

  // fixed32 custom_data_9 = 11;
  void clear_custom_data_9();
  static const int kCustomData9FieldNumber = 11;
  ::google::protobuf::uint32 custom_data_9() const;
  void set_custom_data_9(::google::protobuf::uint32 value);

  // fixed32 custom_data_10 = 12;
  void clear_custom_data_10();
  static const int kCustomData10FieldNumber = 12;
  ::google::protobuf::uint32 custom_data_10() const;
  void set_custom_data_10(::google::protobuf::uint32 value);

  // fixed32 custom_data_11 = 13;
  void clear_custom_data_11();
  static const int kCustomData11FieldNumber = 13;
  ::google::protobuf::uint32 custom_data_11() const;
  void set_custom_data_11(::google::protobuf::uint32 value);

  // fixed32 custom_data_12 = 14;
  void clear_custom_data_12();
  static const int kCustomData12FieldNumber = 14;
  ::google::protobuf::uint32 custom_data_12() const;
  void set_custom_data_12(::google::protobuf::uint32 value);

  // fixed32 custom_data_13 = 15;
  void clear_custom_data_13();
  static const int kCustomData13FieldNumber = 15;
  ::google::protobuf::uint32 custom_data_13() const;
  void set_custom_data_13(::google::protobuf::uint32 value);

  // fixed32 custom_data_14 = 16;
  void clear_custom_data_14();
  static const int kCustomData14FieldNumber = 16;
  ::google::protobuf::uint32 custom_data_14() const;
  void set_custom_data_14(::google::protobuf::uint32 value);

  // fixed32 custom_data_15 = 17;
  void clear_custom_data_15();
  static const int kCustomData15FieldNumber = 17;
  ::google::protobuf::uint32 custom_data_15() const;
  void set_custom_data_15(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Kinova.Api.BaseCyclic.ActuatorCustomData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 command_id_;
  ::google::protobuf::uint32 custom_data_0_;
  ::google::protobuf::uint32 custom_data_1_;
  ::google::protobuf::uint32 custom_data_2_;
  ::google::protobuf::uint32 custom_data_3_;
  ::google::protobuf::uint32 custom_data_4_;
  ::google::protobuf::uint32 custom_data_5_;
  ::google::protobuf::uint32 custom_data_6_;
  ::google::protobuf::uint32 custom_data_7_;
  ::google::protobuf::uint32 custom_data_8_;
  ::google::protobuf::uint32 custom_data_9_;
  ::google::protobuf::uint32 custom_data_10_;
  ::google::protobuf::uint32 custom_data_11_;
  ::google::protobuf::uint32 custom_data_12_;
  ::google::protobuf::uint32 custom_data_13_;
  ::google::protobuf::uint32 custom_data_14_;
  ::google::protobuf::uint32 custom_data_15_;
  mutable int _cached_size_;
  friend struct ::protobuf_BaseCyclic_2eproto::TableStruct;
  friend void ::protobuf_BaseCyclic_2eproto::InitDefaultsActuatorCustomDataImpl();
};
// -------------------------------------------------------------------

class BaseFeedback : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Kinova.Api.BaseCyclic.BaseFeedback) */ {
 public:
  BaseFeedback();
  virtual ~BaseFeedback();

  BaseFeedback(const BaseFeedback& from);

  inline BaseFeedback& operator=(const BaseFeedback& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BaseFeedback(BaseFeedback&& from) noexcept
    : BaseFeedback() {
    *this = ::std::move(from);
  }

  inline BaseFeedback& operator=(BaseFeedback&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseFeedback& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseFeedback* internal_default_instance() {
    return reinterpret_cast<const BaseFeedback*>(
               &_BaseFeedback_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(BaseFeedback* other);
  friend void swap(BaseFeedback& a, BaseFeedback& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BaseFeedback* New() const PROTOBUF_FINAL { return New(NULL); }

  BaseFeedback* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BaseFeedback& from);
  void MergeFrom(const BaseFeedback& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BaseFeedback* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 active_state_connection_identifier = 1;
  void clear_active_state_connection_identifier();
  static const int kActiveStateConnectionIdentifierFieldNumber = 1;
  ::google::protobuf::uint32 active_state_connection_identifier() const;
  void set_active_state_connection_identifier(::google::protobuf::uint32 value);

  // .Kinova.Api.Common.ArmState active_state = 2;
  void clear_active_state();
  static const int kActiveStateFieldNumber = 2;
  ::Kinova::Api::Common::ArmState active_state() const;
  void set_active_state(::Kinova::Api::Common::ArmState value);

  // float arm_voltage = 3;
  void clear_arm_voltage();
  static const int kArmVoltageFieldNumber = 3;
  float arm_voltage() const;
  void set_arm_voltage(float value);

  // float arm_current = 4;
  void clear_arm_current();
  static const int kArmCurrentFieldNumber = 4;
  float arm_current() const;
  void set_arm_current(float value);

  // float temperature_cpu = 5;
  void clear_temperature_cpu();
  static const int kTemperatureCpuFieldNumber = 5;
  float temperature_cpu() const;
  void set_temperature_cpu(float value);

  // float temperature_ambient = 6;
  void clear_temperature_ambient();
  static const int kTemperatureAmbientFieldNumber = 6;
  float temperature_ambient() const;
  void set_temperature_ambient(float value);

  // float imu_acceleration_x = 7;
  void clear_imu_acceleration_x();
  static const int kImuAccelerationXFieldNumber = 7;
  float imu_acceleration_x() const;
  void set_imu_acceleration_x(float value);

  // float imu_acceleration_y = 8;
  void clear_imu_acceleration_y();
  static const int kImuAccelerationYFieldNumber = 8;
  float imu_acceleration_y() const;
  void set_imu_acceleration_y(float value);

  // float imu_acceleration_z = 9;
  void clear_imu_acceleration_z();
  static const int kImuAccelerationZFieldNumber = 9;
  float imu_acceleration_z() const;
  void set_imu_acceleration_z(float value);

  // float imu_angular_velocity_x = 10;
  void clear_imu_angular_velocity_x();
  static const int kImuAngularVelocityXFieldNumber = 10;
  float imu_angular_velocity_x() const;
  void set_imu_angular_velocity_x(float value);

  // float imu_angular_velocity_y = 11;
  void clear_imu_angular_velocity_y();
  static const int kImuAngularVelocityYFieldNumber = 11;
  float imu_angular_velocity_y() const;
  void set_imu_angular_velocity_y(float value);

  // float imu_angular_velocity_z = 12;
  void clear_imu_angular_velocity_z();
  static const int kImuAngularVelocityZFieldNumber = 12;
  float imu_angular_velocity_z() const;
  void set_imu_angular_velocity_z(float value);

  // float tool_pose_x = 13;
  void clear_tool_pose_x();
  static const int kToolPoseXFieldNumber = 13;
  float tool_pose_x() const;
  void set_tool_pose_x(float value);

  // float tool_pose_y = 14;
  void clear_tool_pose_y();
  static const int kToolPoseYFieldNumber = 14;
  float tool_pose_y() const;
  void set_tool_pose_y(float value);

  // float tool_pose_z = 15;
  void clear_tool_pose_z();
  static const int kToolPoseZFieldNumber = 15;
  float tool_pose_z() const;
  void set_tool_pose_z(float value);

  // float tool_pose_theta_x = 16;
  void clear_tool_pose_theta_x();
  static const int kToolPoseThetaXFieldNumber = 16;
  float tool_pose_theta_x() const;
  void set_tool_pose_theta_x(float value);

  // float tool_pose_theta_y = 17;
  void clear_tool_pose_theta_y();
  static const int kToolPoseThetaYFieldNumber = 17;
  float tool_pose_theta_y() const;
  void set_tool_pose_theta_y(float value);

  // float tool_pose_theta_z = 18;
  void clear_tool_pose_theta_z();
  static const int kToolPoseThetaZFieldNumber = 18;
  float tool_pose_theta_z() const;
  void set_tool_pose_theta_z(float value);

  // float tool_twist_linear_x = 19;
  void clear_tool_twist_linear_x();
  static const int kToolTwistLinearXFieldNumber = 19;
  float tool_twist_linear_x() const;
  void set_tool_twist_linear_x(float value);

  // float tool_twist_linear_y = 20;
  void clear_tool_twist_linear_y();
  static const int kToolTwistLinearYFieldNumber = 20;
  float tool_twist_linear_y() const;
  void set_tool_twist_linear_y(float value);

  // float tool_twist_linear_z = 21;
  void clear_tool_twist_linear_z();
  static const int kToolTwistLinearZFieldNumber = 21;
  float tool_twist_linear_z() const;
  void set_tool_twist_linear_z(float value);

  // float tool_twist_angular_x = 22;
  void clear_tool_twist_angular_x();
  static const int kToolTwistAngularXFieldNumber = 22;
  float tool_twist_angular_x() const;
  void set_tool_twist_angular_x(float value);

  // float tool_twist_angular_y = 23;
  void clear_tool_twist_angular_y();
  static const int kToolTwistAngularYFieldNumber = 23;
  float tool_twist_angular_y() const;
  void set_tool_twist_angular_y(float value);

  // float tool_twist_angular_z = 24;
  void clear_tool_twist_angular_z();
  static const int kToolTwistAngularZFieldNumber = 24;
  float tool_twist_angular_z() const;
  void set_tool_twist_angular_z(float value);

  // float tool_external_wrench_force_x = 25;
  void clear_tool_external_wrench_force_x();
  static const int kToolExternalWrenchForceXFieldNumber = 25;
  float tool_external_wrench_force_x() const;
  void set_tool_external_wrench_force_x(float value);

  // float tool_external_wrench_force_y = 26;
  void clear_tool_external_wrench_force_y();
  static const int kToolExternalWrenchForceYFieldNumber = 26;
  float tool_external_wrench_force_y() const;
  void set_tool_external_wrench_force_y(float value);

  // float tool_external_wrench_force_z = 27;
  void clear_tool_external_wrench_force_z();
  static const int kToolExternalWrenchForceZFieldNumber = 27;
  float tool_external_wrench_force_z() const;
  void set_tool_external_wrench_force_z(float value);

  // float tool_external_wrench_torque_x = 28;
  void clear_tool_external_wrench_torque_x();
  static const int kToolExternalWrenchTorqueXFieldNumber = 28;
  float tool_external_wrench_torque_x() const;
  void set_tool_external_wrench_torque_x(float value);

  // float tool_external_wrench_torque_y = 29;
  void clear_tool_external_wrench_torque_y();
  static const int kToolExternalWrenchTorqueYFieldNumber = 29;
  float tool_external_wrench_torque_y() const;
  void set_tool_external_wrench_torque_y(float value);

  // float tool_external_wrench_torque_z = 30;
  void clear_tool_external_wrench_torque_z();
  static const int kToolExternalWrenchTorqueZFieldNumber = 30;
  float tool_external_wrench_torque_z() const;
  void set_tool_external_wrench_torque_z(float value);

  // fixed32 fault_bank_a = 31;
  void clear_fault_bank_a();
  static const int kFaultBankAFieldNumber = 31;
  ::google::protobuf::uint32 fault_bank_a() const;
  void set_fault_bank_a(::google::protobuf::uint32 value);

  // fixed32 fault_bank_b = 32;
  void clear_fault_bank_b();
  static const int kFaultBankBFieldNumber = 32;
  ::google::protobuf::uint32 fault_bank_b() const;
  void set_fault_bank_b(::google::protobuf::uint32 value);

  // fixed32 warning_bank_a = 33;
  void clear_warning_bank_a();
  static const int kWarningBankAFieldNumber = 33;
  ::google::protobuf::uint32 warning_bank_a() const;
  void set_warning_bank_a(::google::protobuf::uint32 value);

  // fixed32 warning_bank_b = 34;
  void clear_warning_bank_b();
  static const int kWarningBankBFieldNumber = 34;
  ::google::protobuf::uint32 warning_bank_b() const;
  void set_warning_bank_b(::google::protobuf::uint32 value);

  // float commanded_tool_pose_x = 35;
  void clear_commanded_tool_pose_x();
  static const int kCommandedToolPoseXFieldNumber = 35;
  float commanded_tool_pose_x() const;
  void set_commanded_tool_pose_x(float value);

  // float commanded_tool_pose_y = 36;
  void clear_commanded_tool_pose_y();
  static const int kCommandedToolPoseYFieldNumber = 36;
  float commanded_tool_pose_y() const;
  void set_commanded_tool_pose_y(float value);

  // float commanded_tool_pose_z = 37;
  void clear_commanded_tool_pose_z();
  static const int kCommandedToolPoseZFieldNumber = 37;
  float commanded_tool_pose_z() const;
  void set_commanded_tool_pose_z(float value);

  // float commanded_tool_pose_theta_x = 38;
  void clear_commanded_tool_pose_theta_x();
  static const int kCommandedToolPoseThetaXFieldNumber = 38;
  float commanded_tool_pose_theta_x() const;
  void set_commanded_tool_pose_theta_x(float value);

  // float commanded_tool_pose_theta_y = 39;
  void clear_commanded_tool_pose_theta_y();
  static const int kCommandedToolPoseThetaYFieldNumber = 39;
  float commanded_tool_pose_theta_y() const;
  void set_commanded_tool_pose_theta_y(float value);

  // float commanded_tool_pose_theta_z = 40;
  void clear_commanded_tool_pose_theta_z();
  static const int kCommandedToolPoseThetaZFieldNumber = 40;
  float commanded_tool_pose_theta_z() const;
  void set_commanded_tool_pose_theta_z(float value);

  // @@protoc_insertion_point(class_scope:Kinova.Api.BaseCyclic.BaseFeedback)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 active_state_connection_identifier_;
  int active_state_;
  float arm_voltage_;
  float arm_current_;
  float temperature_cpu_;
  float temperature_ambient_;
  float imu_acceleration_x_;
  float imu_acceleration_y_;
  float imu_acceleration_z_;
  float imu_angular_velocity_x_;
  float imu_angular_velocity_y_;
  float imu_angular_velocity_z_;
  float tool_pose_x_;
  float tool_pose_y_;
  float tool_pose_z_;
  float tool_pose_theta_x_;
  float tool_pose_theta_y_;
  float tool_pose_theta_z_;
  float tool_twist_linear_x_;
  float tool_twist_linear_y_;
  float tool_twist_linear_z_;
  float tool_twist_angular_x_;
  float tool_twist_angular_y_;
  float tool_twist_angular_z_;
  float tool_external_wrench_force_x_;
  float tool_external_wrench_force_y_;
  float tool_external_wrench_force_z_;
  float tool_external_wrench_torque_x_;
  float tool_external_wrench_torque_y_;
  float tool_external_wrench_torque_z_;
  ::google::protobuf::uint32 fault_bank_a_;
  ::google::protobuf::uint32 fault_bank_b_;
  ::google::protobuf::uint32 warning_bank_a_;
  ::google::protobuf::uint32 warning_bank_b_;
  float commanded_tool_pose_x_;
  float commanded_tool_pose_y_;
  float commanded_tool_pose_z_;
  float commanded_tool_pose_theta_x_;
  float commanded_tool_pose_theta_y_;
  float commanded_tool_pose_theta_z_;
  mutable int _cached_size_;
  friend struct ::protobuf_BaseCyclic_2eproto::TableStruct;
  friend void ::protobuf_BaseCyclic_2eproto::InitDefaultsBaseFeedbackImpl();
};
// -------------------------------------------------------------------

class CustomData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Kinova.Api.BaseCyclic.CustomData) */ {
 public:
  CustomData();
  virtual ~CustomData();

  CustomData(const CustomData& from);

  inline CustomData& operator=(const CustomData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CustomData(CustomData&& from) noexcept
    : CustomData() {
    *this = ::std::move(from);
  }

  inline CustomData& operator=(CustomData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CustomData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CustomData* internal_default_instance() {
    return reinterpret_cast<const CustomData*>(
               &_CustomData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(CustomData* other);
  friend void swap(CustomData& a, CustomData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CustomData* New() const PROTOBUF_FINAL { return New(NULL); }

  CustomData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CustomData& from);
  void MergeFrom(const CustomData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CustomData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Kinova.Api.BaseCyclic.ActuatorCustomData actuators_custom_data = 10;
  int actuators_custom_data_size() const;
  void clear_actuators_custom_data();
  static const int kActuatorsCustomDataFieldNumber = 10;
  const ::Kinova::Api::BaseCyclic::ActuatorCustomData& actuators_custom_data(int index) const;
  ::Kinova::Api::BaseCyclic::ActuatorCustomData* mutable_actuators_custom_data(int index);
  ::Kinova::Api::BaseCyclic::ActuatorCustomData* add_actuators_custom_data();
  ::google::protobuf::RepeatedPtrField< ::Kinova::Api::BaseCyclic::ActuatorCustomData >*
      mutable_actuators_custom_data();
  const ::google::protobuf::RepeatedPtrField< ::Kinova::Api::BaseCyclic::ActuatorCustomData >&
      actuators_custom_data() const;

  // .Kinova.Api.InterconnectCyclic.CustomData interconnect_custom_data = 11;
  bool has_interconnect_custom_data() const;
  void clear_interconnect_custom_data();
  static const int kInterconnectCustomDataFieldNumber = 11;
  const ::Kinova::Api::InterconnectCyclic::CustomData& interconnect_custom_data() const;
  ::Kinova::Api::InterconnectCyclic::CustomData* release_interconnect_custom_data();
  ::Kinova::Api::InterconnectCyclic::CustomData* mutable_interconnect_custom_data();
  void set_allocated_interconnect_custom_data(::Kinova::Api::InterconnectCyclic::CustomData* interconnect_custom_data);

  // fixed32 frame_id = 1;
  void clear_frame_id();
  static const int kFrameIdFieldNumber = 1;
  ::google::protobuf::uint32 frame_id() const;
  void set_frame_id(::google::protobuf::uint32 value);

  // fixed32 custom_data_0 = 2;
  void clear_custom_data_0();
  static const int kCustomData0FieldNumber = 2;
  ::google::protobuf::uint32 custom_data_0() const;
  void set_custom_data_0(::google::protobuf::uint32 value);

  // fixed32 custom_data_1 = 3;
  void clear_custom_data_1();
  static const int kCustomData1FieldNumber = 3;
  ::google::protobuf::uint32 custom_data_1() const;
  void set_custom_data_1(::google::protobuf::uint32 value);

  // fixed32 custom_data_2 = 4;
  void clear_custom_data_2();
  static const int kCustomData2FieldNumber = 4;
  ::google::protobuf::uint32 custom_data_2() const;
  void set_custom_data_2(::google::protobuf::uint32 value);

  // fixed32 custom_data_3 = 5;
  void clear_custom_data_3();
  static const int kCustomData3FieldNumber = 5;
  ::google::protobuf::uint32 custom_data_3() const;
  void set_custom_data_3(::google::protobuf::uint32 value);

  // fixed32 custom_data_4 = 6;
  void clear_custom_data_4();
  static const int kCustomData4FieldNumber = 6;
  ::google::protobuf::uint32 custom_data_4() const;
  void set_custom_data_4(::google::protobuf::uint32 value);

  // fixed32 custom_data_5 = 7;
  void clear_custom_data_5();
  static const int kCustomData5FieldNumber = 7;
  ::google::protobuf::uint32 custom_data_5() const;
  void set_custom_data_5(::google::protobuf::uint32 value);

  // fixed32 custom_data_6 = 8;
  void clear_custom_data_6();
  static const int kCustomData6FieldNumber = 8;
  ::google::protobuf::uint32 custom_data_6() const;
  void set_custom_data_6(::google::protobuf::uint32 value);

  // fixed32 custom_data_7 = 9;
  void clear_custom_data_7();
  static const int kCustomData7FieldNumber = 9;
  ::google::protobuf::uint32 custom_data_7() const;
  void set_custom_data_7(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Kinova.Api.BaseCyclic.CustomData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Kinova::Api::BaseCyclic::ActuatorCustomData > actuators_custom_data_;
  ::Kinova::Api::InterconnectCyclic::CustomData* interconnect_custom_data_;
  ::google::protobuf::uint32 frame_id_;
  ::google::protobuf::uint32 custom_data_0_;
  ::google::protobuf::uint32 custom_data_1_;
  ::google::protobuf::uint32 custom_data_2_;
  ::google::protobuf::uint32 custom_data_3_;
  ::google::protobuf::uint32 custom_data_4_;
  ::google::protobuf::uint32 custom_data_5_;
  ::google::protobuf::uint32 custom_data_6_;
  ::google::protobuf::uint32 custom_data_7_;
  mutable int _cached_size_;
  friend struct ::protobuf_BaseCyclic_2eproto::TableStruct;
  friend void ::protobuf_BaseCyclic_2eproto::InitDefaultsCustomDataImpl();
};
// -------------------------------------------------------------------

class Command : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Kinova.Api.BaseCyclic.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Command* other);
  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const PROTOBUF_FINAL { return New(NULL); }

  Command* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Kinova.Api.BaseCyclic.ActuatorCommand actuators = 2;
  int actuators_size() const;
  void clear_actuators();
  static const int kActuatorsFieldNumber = 2;
  const ::Kinova::Api::BaseCyclic::ActuatorCommand& actuators(int index) const;
  ::Kinova::Api::BaseCyclic::ActuatorCommand* mutable_actuators(int index);
  ::Kinova::Api::BaseCyclic::ActuatorCommand* add_actuators();
  ::google::protobuf::RepeatedPtrField< ::Kinova::Api::BaseCyclic::ActuatorCommand >*
      mutable_actuators();
  const ::google::protobuf::RepeatedPtrField< ::Kinova::Api::BaseCyclic::ActuatorCommand >&
      actuators() const;

  // .Kinova.Api.InterconnectCyclic.Command interconnect = 3;
  bool has_interconnect() const;
  void clear_interconnect();
  static const int kInterconnectFieldNumber = 3;
  const ::Kinova::Api::InterconnectCyclic::Command& interconnect() const;
  ::Kinova::Api::InterconnectCyclic::Command* release_interconnect();
  ::Kinova::Api::InterconnectCyclic::Command* mutable_interconnect();
  void set_allocated_interconnect(::Kinova::Api::InterconnectCyclic::Command* interconnect);

  // fixed32 frame_id = 1;
  void clear_frame_id();
  static const int kFrameIdFieldNumber = 1;
  ::google::protobuf::uint32 frame_id() const;
  void set_frame_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Kinova.Api.BaseCyclic.Command)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Kinova::Api::BaseCyclic::ActuatorCommand > actuators_;
  ::Kinova::Api::InterconnectCyclic::Command* interconnect_;
  ::google::protobuf::uint32 frame_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_BaseCyclic_2eproto::TableStruct;
  friend void ::protobuf_BaseCyclic_2eproto::InitDefaultsCommandImpl();
};
// -------------------------------------------------------------------

class Feedback : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Kinova.Api.BaseCyclic.Feedback) */ {
 public:
  Feedback();
  virtual ~Feedback();

  Feedback(const Feedback& from);

  inline Feedback& operator=(const Feedback& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Feedback(Feedback&& from) noexcept
    : Feedback() {
    *this = ::std::move(from);
  }

  inline Feedback& operator=(Feedback&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Feedback& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Feedback* internal_default_instance() {
    return reinterpret_cast<const Feedback*>(
               &_Feedback_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Feedback* other);
  friend void swap(Feedback& a, Feedback& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Feedback* New() const PROTOBUF_FINAL { return New(NULL); }

  Feedback* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Feedback& from);
  void MergeFrom(const Feedback& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Feedback* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Kinova.Api.BaseCyclic.ActuatorFeedback actuators = 3;
  int actuators_size() const;
  void clear_actuators();
  static const int kActuatorsFieldNumber = 3;
  const ::Kinova::Api::BaseCyclic::ActuatorFeedback& actuators(int index) const;
  ::Kinova::Api::BaseCyclic::ActuatorFeedback* mutable_actuators(int index);
  ::Kinova::Api::BaseCyclic::ActuatorFeedback* add_actuators();
  ::google::protobuf::RepeatedPtrField< ::Kinova::Api::BaseCyclic::ActuatorFeedback >*
      mutable_actuators();
  const ::google::protobuf::RepeatedPtrField< ::Kinova::Api::BaseCyclic::ActuatorFeedback >&
      actuators() const;

  // .Kinova.Api.BaseCyclic.BaseFeedback base = 2;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 2;
  const ::Kinova::Api::BaseCyclic::BaseFeedback& base() const;
  ::Kinova::Api::BaseCyclic::BaseFeedback* release_base();
  ::Kinova::Api::BaseCyclic::BaseFeedback* mutable_base();
  void set_allocated_base(::Kinova::Api::BaseCyclic::BaseFeedback* base);

  // .Kinova.Api.InterconnectCyclic.Feedback interconnect = 4;
  bool has_interconnect() const;
  void clear_interconnect();
  static const int kInterconnectFieldNumber = 4;
  const ::Kinova::Api::InterconnectCyclic::Feedback& interconnect() const;
  ::Kinova::Api::InterconnectCyclic::Feedback* release_interconnect();
  ::Kinova::Api::InterconnectCyclic::Feedback* mutable_interconnect();
  void set_allocated_interconnect(::Kinova::Api::InterconnectCyclic::Feedback* interconnect);

  // fixed32 frame_id = 1;
  void clear_frame_id();
  static const int kFrameIdFieldNumber = 1;
  ::google::protobuf::uint32 frame_id() const;
  void set_frame_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Kinova.Api.BaseCyclic.Feedback)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Kinova::Api::BaseCyclic::ActuatorFeedback > actuators_;
  ::Kinova::Api::BaseCyclic::BaseFeedback* base_;
  ::Kinova::Api::InterconnectCyclic::Feedback* interconnect_;
  ::google::protobuf::uint32 frame_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_BaseCyclic_2eproto::TableStruct;
  friend void ::protobuf_BaseCyclic_2eproto::InitDefaultsFeedbackImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ActuatorCommand

// fixed32 command_id = 1;
inline void ActuatorCommand::clear_command_id() {
  command_id_ = 0u;
}
inline ::google::protobuf::uint32 ActuatorCommand::command_id() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorCommand.command_id)
  return command_id_;
}
inline void ActuatorCommand::set_command_id(::google::protobuf::uint32 value) {
  
  command_id_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorCommand.command_id)
}

// fixed32 flags = 2;
inline void ActuatorCommand::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 ActuatorCommand::flags() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorCommand.flags)
  return flags_;
}
inline void ActuatorCommand::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorCommand.flags)
}

// float position = 3;
inline void ActuatorCommand::clear_position() {
  position_ = 0;
}
inline float ActuatorCommand::position() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorCommand.position)
  return position_;
}
inline void ActuatorCommand::set_position(float value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorCommand.position)
}

// float velocity = 4;
inline void ActuatorCommand::clear_velocity() {
  velocity_ = 0;
}
inline float ActuatorCommand::velocity() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorCommand.velocity)
  return velocity_;
}
inline void ActuatorCommand::set_velocity(float value) {
  
  velocity_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorCommand.velocity)
}

// float torque_joint = 5;
inline void ActuatorCommand::clear_torque_joint() {
  torque_joint_ = 0;
}
inline float ActuatorCommand::torque_joint() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorCommand.torque_joint)
  return torque_joint_;
}
inline void ActuatorCommand::set_torque_joint(float value) {
  
  torque_joint_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorCommand.torque_joint)
}

// float current_motor = 6;
inline void ActuatorCommand::clear_current_motor() {
  current_motor_ = 0;
}
inline float ActuatorCommand::current_motor() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorCommand.current_motor)
  return current_motor_;
}
inline void ActuatorCommand::set_current_motor(float value) {
  
  current_motor_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorCommand.current_motor)
}

// -------------------------------------------------------------------

// ActuatorFeedback

// fixed32 command_id = 1;
inline void ActuatorFeedback::clear_command_id() {
  command_id_ = 0u;
}
inline ::google::protobuf::uint32 ActuatorFeedback::command_id() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorFeedback.command_id)
  return command_id_;
}
inline void ActuatorFeedback::set_command_id(::google::protobuf::uint32 value) {
  
  command_id_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorFeedback.command_id)
}

// fixed32 status_flags = 2;
inline void ActuatorFeedback::clear_status_flags() {
  status_flags_ = 0u;
}
inline ::google::protobuf::uint32 ActuatorFeedback::status_flags() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorFeedback.status_flags)
  return status_flags_;
}
inline void ActuatorFeedback::set_status_flags(::google::protobuf::uint32 value) {
  
  status_flags_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorFeedback.status_flags)
}

// fixed32 jitter_comm = 3;
inline void ActuatorFeedback::clear_jitter_comm() {
  jitter_comm_ = 0u;
}
inline ::google::protobuf::uint32 ActuatorFeedback::jitter_comm() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorFeedback.jitter_comm)
  return jitter_comm_;
}
inline void ActuatorFeedback::set_jitter_comm(::google::protobuf::uint32 value) {
  
  jitter_comm_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorFeedback.jitter_comm)
}

// float position = 4;
inline void ActuatorFeedback::clear_position() {
  position_ = 0;
}
inline float ActuatorFeedback::position() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorFeedback.position)
  return position_;
}
inline void ActuatorFeedback::set_position(float value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorFeedback.position)
}

// float velocity = 5;
inline void ActuatorFeedback::clear_velocity() {
  velocity_ = 0;
}
inline float ActuatorFeedback::velocity() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorFeedback.velocity)
  return velocity_;
}
inline void ActuatorFeedback::set_velocity(float value) {
  
  velocity_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorFeedback.velocity)
}

// float torque = 6;
inline void ActuatorFeedback::clear_torque() {
  torque_ = 0;
}
inline float ActuatorFeedback::torque() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorFeedback.torque)
  return torque_;
}
inline void ActuatorFeedback::set_torque(float value) {
  
  torque_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorFeedback.torque)
}

// float current_motor = 7;
inline void ActuatorFeedback::clear_current_motor() {
  current_motor_ = 0;
}
inline float ActuatorFeedback::current_motor() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorFeedback.current_motor)
  return current_motor_;
}
inline void ActuatorFeedback::set_current_motor(float value) {
  
  current_motor_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorFeedback.current_motor)
}

// float voltage = 8;
inline void ActuatorFeedback::clear_voltage() {
  voltage_ = 0;
}
inline float ActuatorFeedback::voltage() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorFeedback.voltage)
  return voltage_;
}
inline void ActuatorFeedback::set_voltage(float value) {
  
  voltage_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorFeedback.voltage)
}

// float temperature_motor = 9;
inline void ActuatorFeedback::clear_temperature_motor() {
  temperature_motor_ = 0;
}
inline float ActuatorFeedback::temperature_motor() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorFeedback.temperature_motor)
  return temperature_motor_;
}
inline void ActuatorFeedback::set_temperature_motor(float value) {
  
  temperature_motor_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorFeedback.temperature_motor)
}

// float temperature_core = 10;
inline void ActuatorFeedback::clear_temperature_core() {
  temperature_core_ = 0;
}
inline float ActuatorFeedback::temperature_core() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorFeedback.temperature_core)
  return temperature_core_;
}
inline void ActuatorFeedback::set_temperature_core(float value) {
  
  temperature_core_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorFeedback.temperature_core)
}

// fixed32 fault_bank_a = 11;
inline void ActuatorFeedback::clear_fault_bank_a() {
  fault_bank_a_ = 0u;
}
inline ::google::protobuf::uint32 ActuatorFeedback::fault_bank_a() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorFeedback.fault_bank_a)
  return fault_bank_a_;
}
inline void ActuatorFeedback::set_fault_bank_a(::google::protobuf::uint32 value) {
  
  fault_bank_a_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorFeedback.fault_bank_a)
}

// fixed32 fault_bank_b = 12;
inline void ActuatorFeedback::clear_fault_bank_b() {
  fault_bank_b_ = 0u;
}
inline ::google::protobuf::uint32 ActuatorFeedback::fault_bank_b() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorFeedback.fault_bank_b)
  return fault_bank_b_;
}
inline void ActuatorFeedback::set_fault_bank_b(::google::protobuf::uint32 value) {
  
  fault_bank_b_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorFeedback.fault_bank_b)
}

// fixed32 warning_bank_a = 13;
inline void ActuatorFeedback::clear_warning_bank_a() {
  warning_bank_a_ = 0u;
}
inline ::google::protobuf::uint32 ActuatorFeedback::warning_bank_a() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorFeedback.warning_bank_a)
  return warning_bank_a_;
}
inline void ActuatorFeedback::set_warning_bank_a(::google::protobuf::uint32 value) {
  
  warning_bank_a_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorFeedback.warning_bank_a)
}

// fixed32 warning_bank_b = 14;
inline void ActuatorFeedback::clear_warning_bank_b() {
  warning_bank_b_ = 0u;
}
inline ::google::protobuf::uint32 ActuatorFeedback::warning_bank_b() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorFeedback.warning_bank_b)
  return warning_bank_b_;
}
inline void ActuatorFeedback::set_warning_bank_b(::google::protobuf::uint32 value) {
  
  warning_bank_b_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorFeedback.warning_bank_b)
}

// -------------------------------------------------------------------

// ActuatorCustomData

// fixed32 command_id = 1;
inline void ActuatorCustomData::clear_command_id() {
  command_id_ = 0u;
}
inline ::google::protobuf::uint32 ActuatorCustomData::command_id() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorCustomData.command_id)
  return command_id_;
}
inline void ActuatorCustomData::set_command_id(::google::protobuf::uint32 value) {
  
  command_id_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorCustomData.command_id)
}

// fixed32 custom_data_0 = 2;
inline void ActuatorCustomData::clear_custom_data_0() {
  custom_data_0_ = 0u;
}
inline ::google::protobuf::uint32 ActuatorCustomData::custom_data_0() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorCustomData.custom_data_0)
  return custom_data_0_;
}
inline void ActuatorCustomData::set_custom_data_0(::google::protobuf::uint32 value) {
  
  custom_data_0_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorCustomData.custom_data_0)
}

// fixed32 custom_data_1 = 3;
inline void ActuatorCustomData::clear_custom_data_1() {
  custom_data_1_ = 0u;
}
inline ::google::protobuf::uint32 ActuatorCustomData::custom_data_1() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorCustomData.custom_data_1)
  return custom_data_1_;
}
inline void ActuatorCustomData::set_custom_data_1(::google::protobuf::uint32 value) {
  
  custom_data_1_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorCustomData.custom_data_1)
}

// fixed32 custom_data_2 = 4;
inline void ActuatorCustomData::clear_custom_data_2() {
  custom_data_2_ = 0u;
}
inline ::google::protobuf::uint32 ActuatorCustomData::custom_data_2() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorCustomData.custom_data_2)
  return custom_data_2_;
}
inline void ActuatorCustomData::set_custom_data_2(::google::protobuf::uint32 value) {
  
  custom_data_2_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorCustomData.custom_data_2)
}

// fixed32 custom_data_3 = 5;
inline void ActuatorCustomData::clear_custom_data_3() {
  custom_data_3_ = 0u;
}
inline ::google::protobuf::uint32 ActuatorCustomData::custom_data_3() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorCustomData.custom_data_3)
  return custom_data_3_;
}
inline void ActuatorCustomData::set_custom_data_3(::google::protobuf::uint32 value) {
  
  custom_data_3_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorCustomData.custom_data_3)
}

// fixed32 custom_data_4 = 6;
inline void ActuatorCustomData::clear_custom_data_4() {
  custom_data_4_ = 0u;
}
inline ::google::protobuf::uint32 ActuatorCustomData::custom_data_4() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorCustomData.custom_data_4)
  return custom_data_4_;
}
inline void ActuatorCustomData::set_custom_data_4(::google::protobuf::uint32 value) {
  
  custom_data_4_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorCustomData.custom_data_4)
}

// fixed32 custom_data_5 = 7;
inline void ActuatorCustomData::clear_custom_data_5() {
  custom_data_5_ = 0u;
}
inline ::google::protobuf::uint32 ActuatorCustomData::custom_data_5() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorCustomData.custom_data_5)
  return custom_data_5_;
}
inline void ActuatorCustomData::set_custom_data_5(::google::protobuf::uint32 value) {
  
  custom_data_5_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorCustomData.custom_data_5)
}

// fixed32 custom_data_6 = 8;
inline void ActuatorCustomData::clear_custom_data_6() {
  custom_data_6_ = 0u;
}
inline ::google::protobuf::uint32 ActuatorCustomData::custom_data_6() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorCustomData.custom_data_6)
  return custom_data_6_;
}
inline void ActuatorCustomData::set_custom_data_6(::google::protobuf::uint32 value) {
  
  custom_data_6_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorCustomData.custom_data_6)
}

// fixed32 custom_data_7 = 9;
inline void ActuatorCustomData::clear_custom_data_7() {
  custom_data_7_ = 0u;
}
inline ::google::protobuf::uint32 ActuatorCustomData::custom_data_7() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorCustomData.custom_data_7)
  return custom_data_7_;
}
inline void ActuatorCustomData::set_custom_data_7(::google::protobuf::uint32 value) {
  
  custom_data_7_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorCustomData.custom_data_7)
}

// fixed32 custom_data_8 = 10;
inline void ActuatorCustomData::clear_custom_data_8() {
  custom_data_8_ = 0u;
}
inline ::google::protobuf::uint32 ActuatorCustomData::custom_data_8() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorCustomData.custom_data_8)
  return custom_data_8_;
}
inline void ActuatorCustomData::set_custom_data_8(::google::protobuf::uint32 value) {
  
  custom_data_8_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorCustomData.custom_data_8)
}

// fixed32 custom_data_9 = 11;
inline void ActuatorCustomData::clear_custom_data_9() {
  custom_data_9_ = 0u;
}
inline ::google::protobuf::uint32 ActuatorCustomData::custom_data_9() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorCustomData.custom_data_9)
  return custom_data_9_;
}
inline void ActuatorCustomData::set_custom_data_9(::google::protobuf::uint32 value) {
  
  custom_data_9_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorCustomData.custom_data_9)
}

// fixed32 custom_data_10 = 12;
inline void ActuatorCustomData::clear_custom_data_10() {
  custom_data_10_ = 0u;
}
inline ::google::protobuf::uint32 ActuatorCustomData::custom_data_10() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorCustomData.custom_data_10)
  return custom_data_10_;
}
inline void ActuatorCustomData::set_custom_data_10(::google::protobuf::uint32 value) {
  
  custom_data_10_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorCustomData.custom_data_10)
}

// fixed32 custom_data_11 = 13;
inline void ActuatorCustomData::clear_custom_data_11() {
  custom_data_11_ = 0u;
}
inline ::google::protobuf::uint32 ActuatorCustomData::custom_data_11() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorCustomData.custom_data_11)
  return custom_data_11_;
}
inline void ActuatorCustomData::set_custom_data_11(::google::protobuf::uint32 value) {
  
  custom_data_11_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorCustomData.custom_data_11)
}

// fixed32 custom_data_12 = 14;
inline void ActuatorCustomData::clear_custom_data_12() {
  custom_data_12_ = 0u;
}
inline ::google::protobuf::uint32 ActuatorCustomData::custom_data_12() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorCustomData.custom_data_12)
  return custom_data_12_;
}
inline void ActuatorCustomData::set_custom_data_12(::google::protobuf::uint32 value) {
  
  custom_data_12_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorCustomData.custom_data_12)
}

// fixed32 custom_data_13 = 15;
inline void ActuatorCustomData::clear_custom_data_13() {
  custom_data_13_ = 0u;
}
inline ::google::protobuf::uint32 ActuatorCustomData::custom_data_13() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorCustomData.custom_data_13)
  return custom_data_13_;
}
inline void ActuatorCustomData::set_custom_data_13(::google::protobuf::uint32 value) {
  
  custom_data_13_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorCustomData.custom_data_13)
}

// fixed32 custom_data_14 = 16;
inline void ActuatorCustomData::clear_custom_data_14() {
  custom_data_14_ = 0u;
}
inline ::google::protobuf::uint32 ActuatorCustomData::custom_data_14() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorCustomData.custom_data_14)
  return custom_data_14_;
}
inline void ActuatorCustomData::set_custom_data_14(::google::protobuf::uint32 value) {
  
  custom_data_14_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorCustomData.custom_data_14)
}

// fixed32 custom_data_15 = 17;
inline void ActuatorCustomData::clear_custom_data_15() {
  custom_data_15_ = 0u;
}
inline ::google::protobuf::uint32 ActuatorCustomData::custom_data_15() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.ActuatorCustomData.custom_data_15)
  return custom_data_15_;
}
inline void ActuatorCustomData::set_custom_data_15(::google::protobuf::uint32 value) {
  
  custom_data_15_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.ActuatorCustomData.custom_data_15)
}

// -------------------------------------------------------------------

// BaseFeedback

// uint32 active_state_connection_identifier = 1;
inline void BaseFeedback::clear_active_state_connection_identifier() {
  active_state_connection_identifier_ = 0u;
}
inline ::google::protobuf::uint32 BaseFeedback::active_state_connection_identifier() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.active_state_connection_identifier)
  return active_state_connection_identifier_;
}
inline void BaseFeedback::set_active_state_connection_identifier(::google::protobuf::uint32 value) {
  
  active_state_connection_identifier_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.active_state_connection_identifier)
}

// .Kinova.Api.Common.ArmState active_state = 2;
inline void BaseFeedback::clear_active_state() {
  active_state_ = 0;
}
inline ::Kinova::Api::Common::ArmState BaseFeedback::active_state() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.active_state)
  return static_cast< ::Kinova::Api::Common::ArmState >(active_state_);
}
inline void BaseFeedback::set_active_state(::Kinova::Api::Common::ArmState value) {
  
  active_state_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.active_state)
}

// float arm_voltage = 3;
inline void BaseFeedback::clear_arm_voltage() {
  arm_voltage_ = 0;
}
inline float BaseFeedback::arm_voltage() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.arm_voltage)
  return arm_voltage_;
}
inline void BaseFeedback::set_arm_voltage(float value) {
  
  arm_voltage_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.arm_voltage)
}

// float arm_current = 4;
inline void BaseFeedback::clear_arm_current() {
  arm_current_ = 0;
}
inline float BaseFeedback::arm_current() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.arm_current)
  return arm_current_;
}
inline void BaseFeedback::set_arm_current(float value) {
  
  arm_current_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.arm_current)
}

// float temperature_cpu = 5;
inline void BaseFeedback::clear_temperature_cpu() {
  temperature_cpu_ = 0;
}
inline float BaseFeedback::temperature_cpu() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.temperature_cpu)
  return temperature_cpu_;
}
inline void BaseFeedback::set_temperature_cpu(float value) {
  
  temperature_cpu_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.temperature_cpu)
}

// float temperature_ambient = 6;
inline void BaseFeedback::clear_temperature_ambient() {
  temperature_ambient_ = 0;
}
inline float BaseFeedback::temperature_ambient() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.temperature_ambient)
  return temperature_ambient_;
}
inline void BaseFeedback::set_temperature_ambient(float value) {
  
  temperature_ambient_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.temperature_ambient)
}

// float imu_acceleration_x = 7;
inline void BaseFeedback::clear_imu_acceleration_x() {
  imu_acceleration_x_ = 0;
}
inline float BaseFeedback::imu_acceleration_x() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.imu_acceleration_x)
  return imu_acceleration_x_;
}
inline void BaseFeedback::set_imu_acceleration_x(float value) {
  
  imu_acceleration_x_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.imu_acceleration_x)
}

// float imu_acceleration_y = 8;
inline void BaseFeedback::clear_imu_acceleration_y() {
  imu_acceleration_y_ = 0;
}
inline float BaseFeedback::imu_acceleration_y() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.imu_acceleration_y)
  return imu_acceleration_y_;
}
inline void BaseFeedback::set_imu_acceleration_y(float value) {
  
  imu_acceleration_y_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.imu_acceleration_y)
}

// float imu_acceleration_z = 9;
inline void BaseFeedback::clear_imu_acceleration_z() {
  imu_acceleration_z_ = 0;
}
inline float BaseFeedback::imu_acceleration_z() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.imu_acceleration_z)
  return imu_acceleration_z_;
}
inline void BaseFeedback::set_imu_acceleration_z(float value) {
  
  imu_acceleration_z_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.imu_acceleration_z)
}

// float imu_angular_velocity_x = 10;
inline void BaseFeedback::clear_imu_angular_velocity_x() {
  imu_angular_velocity_x_ = 0;
}
inline float BaseFeedback::imu_angular_velocity_x() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.imu_angular_velocity_x)
  return imu_angular_velocity_x_;
}
inline void BaseFeedback::set_imu_angular_velocity_x(float value) {
  
  imu_angular_velocity_x_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.imu_angular_velocity_x)
}

// float imu_angular_velocity_y = 11;
inline void BaseFeedback::clear_imu_angular_velocity_y() {
  imu_angular_velocity_y_ = 0;
}
inline float BaseFeedback::imu_angular_velocity_y() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.imu_angular_velocity_y)
  return imu_angular_velocity_y_;
}
inline void BaseFeedback::set_imu_angular_velocity_y(float value) {
  
  imu_angular_velocity_y_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.imu_angular_velocity_y)
}

// float imu_angular_velocity_z = 12;
inline void BaseFeedback::clear_imu_angular_velocity_z() {
  imu_angular_velocity_z_ = 0;
}
inline float BaseFeedback::imu_angular_velocity_z() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.imu_angular_velocity_z)
  return imu_angular_velocity_z_;
}
inline void BaseFeedback::set_imu_angular_velocity_z(float value) {
  
  imu_angular_velocity_z_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.imu_angular_velocity_z)
}

// float tool_pose_x = 13;
inline void BaseFeedback::clear_tool_pose_x() {
  tool_pose_x_ = 0;
}
inline float BaseFeedback::tool_pose_x() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.tool_pose_x)
  return tool_pose_x_;
}
inline void BaseFeedback::set_tool_pose_x(float value) {
  
  tool_pose_x_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.tool_pose_x)
}

// float tool_pose_y = 14;
inline void BaseFeedback::clear_tool_pose_y() {
  tool_pose_y_ = 0;
}
inline float BaseFeedback::tool_pose_y() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.tool_pose_y)
  return tool_pose_y_;
}
inline void BaseFeedback::set_tool_pose_y(float value) {
  
  tool_pose_y_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.tool_pose_y)
}

// float tool_pose_z = 15;
inline void BaseFeedback::clear_tool_pose_z() {
  tool_pose_z_ = 0;
}
inline float BaseFeedback::tool_pose_z() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.tool_pose_z)
  return tool_pose_z_;
}
inline void BaseFeedback::set_tool_pose_z(float value) {
  
  tool_pose_z_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.tool_pose_z)
}

// float tool_pose_theta_x = 16;
inline void BaseFeedback::clear_tool_pose_theta_x() {
  tool_pose_theta_x_ = 0;
}
inline float BaseFeedback::tool_pose_theta_x() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.tool_pose_theta_x)
  return tool_pose_theta_x_;
}
inline void BaseFeedback::set_tool_pose_theta_x(float value) {
  
  tool_pose_theta_x_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.tool_pose_theta_x)
}

// float tool_pose_theta_y = 17;
inline void BaseFeedback::clear_tool_pose_theta_y() {
  tool_pose_theta_y_ = 0;
}
inline float BaseFeedback::tool_pose_theta_y() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.tool_pose_theta_y)
  return tool_pose_theta_y_;
}
inline void BaseFeedback::set_tool_pose_theta_y(float value) {
  
  tool_pose_theta_y_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.tool_pose_theta_y)
}

// float tool_pose_theta_z = 18;
inline void BaseFeedback::clear_tool_pose_theta_z() {
  tool_pose_theta_z_ = 0;
}
inline float BaseFeedback::tool_pose_theta_z() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.tool_pose_theta_z)
  return tool_pose_theta_z_;
}
inline void BaseFeedback::set_tool_pose_theta_z(float value) {
  
  tool_pose_theta_z_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.tool_pose_theta_z)
}

// float tool_twist_linear_x = 19;
inline void BaseFeedback::clear_tool_twist_linear_x() {
  tool_twist_linear_x_ = 0;
}
inline float BaseFeedback::tool_twist_linear_x() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.tool_twist_linear_x)
  return tool_twist_linear_x_;
}
inline void BaseFeedback::set_tool_twist_linear_x(float value) {
  
  tool_twist_linear_x_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.tool_twist_linear_x)
}

// float tool_twist_linear_y = 20;
inline void BaseFeedback::clear_tool_twist_linear_y() {
  tool_twist_linear_y_ = 0;
}
inline float BaseFeedback::tool_twist_linear_y() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.tool_twist_linear_y)
  return tool_twist_linear_y_;
}
inline void BaseFeedback::set_tool_twist_linear_y(float value) {
  
  tool_twist_linear_y_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.tool_twist_linear_y)
}

// float tool_twist_linear_z = 21;
inline void BaseFeedback::clear_tool_twist_linear_z() {
  tool_twist_linear_z_ = 0;
}
inline float BaseFeedback::tool_twist_linear_z() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.tool_twist_linear_z)
  return tool_twist_linear_z_;
}
inline void BaseFeedback::set_tool_twist_linear_z(float value) {
  
  tool_twist_linear_z_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.tool_twist_linear_z)
}

// float tool_twist_angular_x = 22;
inline void BaseFeedback::clear_tool_twist_angular_x() {
  tool_twist_angular_x_ = 0;
}
inline float BaseFeedback::tool_twist_angular_x() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.tool_twist_angular_x)
  return tool_twist_angular_x_;
}
inline void BaseFeedback::set_tool_twist_angular_x(float value) {
  
  tool_twist_angular_x_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.tool_twist_angular_x)
}

// float tool_twist_angular_y = 23;
inline void BaseFeedback::clear_tool_twist_angular_y() {
  tool_twist_angular_y_ = 0;
}
inline float BaseFeedback::tool_twist_angular_y() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.tool_twist_angular_y)
  return tool_twist_angular_y_;
}
inline void BaseFeedback::set_tool_twist_angular_y(float value) {
  
  tool_twist_angular_y_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.tool_twist_angular_y)
}

// float tool_twist_angular_z = 24;
inline void BaseFeedback::clear_tool_twist_angular_z() {
  tool_twist_angular_z_ = 0;
}
inline float BaseFeedback::tool_twist_angular_z() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.tool_twist_angular_z)
  return tool_twist_angular_z_;
}
inline void BaseFeedback::set_tool_twist_angular_z(float value) {
  
  tool_twist_angular_z_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.tool_twist_angular_z)
}

// float tool_external_wrench_force_x = 25;
inline void BaseFeedback::clear_tool_external_wrench_force_x() {
  tool_external_wrench_force_x_ = 0;
}
inline float BaseFeedback::tool_external_wrench_force_x() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.tool_external_wrench_force_x)
  return tool_external_wrench_force_x_;
}
inline void BaseFeedback::set_tool_external_wrench_force_x(float value) {
  
  tool_external_wrench_force_x_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.tool_external_wrench_force_x)
}

// float tool_external_wrench_force_y = 26;
inline void BaseFeedback::clear_tool_external_wrench_force_y() {
  tool_external_wrench_force_y_ = 0;
}
inline float BaseFeedback::tool_external_wrench_force_y() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.tool_external_wrench_force_y)
  return tool_external_wrench_force_y_;
}
inline void BaseFeedback::set_tool_external_wrench_force_y(float value) {
  
  tool_external_wrench_force_y_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.tool_external_wrench_force_y)
}

// float tool_external_wrench_force_z = 27;
inline void BaseFeedback::clear_tool_external_wrench_force_z() {
  tool_external_wrench_force_z_ = 0;
}
inline float BaseFeedback::tool_external_wrench_force_z() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.tool_external_wrench_force_z)
  return tool_external_wrench_force_z_;
}
inline void BaseFeedback::set_tool_external_wrench_force_z(float value) {
  
  tool_external_wrench_force_z_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.tool_external_wrench_force_z)
}

// float tool_external_wrench_torque_x = 28;
inline void BaseFeedback::clear_tool_external_wrench_torque_x() {
  tool_external_wrench_torque_x_ = 0;
}
inline float BaseFeedback::tool_external_wrench_torque_x() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.tool_external_wrench_torque_x)
  return tool_external_wrench_torque_x_;
}
inline void BaseFeedback::set_tool_external_wrench_torque_x(float value) {
  
  tool_external_wrench_torque_x_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.tool_external_wrench_torque_x)
}

// float tool_external_wrench_torque_y = 29;
inline void BaseFeedback::clear_tool_external_wrench_torque_y() {
  tool_external_wrench_torque_y_ = 0;
}
inline float BaseFeedback::tool_external_wrench_torque_y() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.tool_external_wrench_torque_y)
  return tool_external_wrench_torque_y_;
}
inline void BaseFeedback::set_tool_external_wrench_torque_y(float value) {
  
  tool_external_wrench_torque_y_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.tool_external_wrench_torque_y)
}

// float tool_external_wrench_torque_z = 30;
inline void BaseFeedback::clear_tool_external_wrench_torque_z() {
  tool_external_wrench_torque_z_ = 0;
}
inline float BaseFeedback::tool_external_wrench_torque_z() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.tool_external_wrench_torque_z)
  return tool_external_wrench_torque_z_;
}
inline void BaseFeedback::set_tool_external_wrench_torque_z(float value) {
  
  tool_external_wrench_torque_z_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.tool_external_wrench_torque_z)
}

// fixed32 fault_bank_a = 31;
inline void BaseFeedback::clear_fault_bank_a() {
  fault_bank_a_ = 0u;
}
inline ::google::protobuf::uint32 BaseFeedback::fault_bank_a() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.fault_bank_a)
  return fault_bank_a_;
}
inline void BaseFeedback::set_fault_bank_a(::google::protobuf::uint32 value) {
  
  fault_bank_a_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.fault_bank_a)
}

// fixed32 fault_bank_b = 32;
inline void BaseFeedback::clear_fault_bank_b() {
  fault_bank_b_ = 0u;
}
inline ::google::protobuf::uint32 BaseFeedback::fault_bank_b() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.fault_bank_b)
  return fault_bank_b_;
}
inline void BaseFeedback::set_fault_bank_b(::google::protobuf::uint32 value) {
  
  fault_bank_b_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.fault_bank_b)
}

// fixed32 warning_bank_a = 33;
inline void BaseFeedback::clear_warning_bank_a() {
  warning_bank_a_ = 0u;
}
inline ::google::protobuf::uint32 BaseFeedback::warning_bank_a() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.warning_bank_a)
  return warning_bank_a_;
}
inline void BaseFeedback::set_warning_bank_a(::google::protobuf::uint32 value) {
  
  warning_bank_a_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.warning_bank_a)
}

// fixed32 warning_bank_b = 34;
inline void BaseFeedback::clear_warning_bank_b() {
  warning_bank_b_ = 0u;
}
inline ::google::protobuf::uint32 BaseFeedback::warning_bank_b() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.warning_bank_b)
  return warning_bank_b_;
}
inline void BaseFeedback::set_warning_bank_b(::google::protobuf::uint32 value) {
  
  warning_bank_b_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.warning_bank_b)
}

// float commanded_tool_pose_x = 35;
inline void BaseFeedback::clear_commanded_tool_pose_x() {
  commanded_tool_pose_x_ = 0;
}
inline float BaseFeedback::commanded_tool_pose_x() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.commanded_tool_pose_x)
  return commanded_tool_pose_x_;
}
inline void BaseFeedback::set_commanded_tool_pose_x(float value) {
  
  commanded_tool_pose_x_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.commanded_tool_pose_x)
}

// float commanded_tool_pose_y = 36;
inline void BaseFeedback::clear_commanded_tool_pose_y() {
  commanded_tool_pose_y_ = 0;
}
inline float BaseFeedback::commanded_tool_pose_y() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.commanded_tool_pose_y)
  return commanded_tool_pose_y_;
}
inline void BaseFeedback::set_commanded_tool_pose_y(float value) {
  
  commanded_tool_pose_y_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.commanded_tool_pose_y)
}

// float commanded_tool_pose_z = 37;
inline void BaseFeedback::clear_commanded_tool_pose_z() {
  commanded_tool_pose_z_ = 0;
}
inline float BaseFeedback::commanded_tool_pose_z() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.commanded_tool_pose_z)
  return commanded_tool_pose_z_;
}
inline void BaseFeedback::set_commanded_tool_pose_z(float value) {
  
  commanded_tool_pose_z_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.commanded_tool_pose_z)
}

// float commanded_tool_pose_theta_x = 38;
inline void BaseFeedback::clear_commanded_tool_pose_theta_x() {
  commanded_tool_pose_theta_x_ = 0;
}
inline float BaseFeedback::commanded_tool_pose_theta_x() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.commanded_tool_pose_theta_x)
  return commanded_tool_pose_theta_x_;
}
inline void BaseFeedback::set_commanded_tool_pose_theta_x(float value) {
  
  commanded_tool_pose_theta_x_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.commanded_tool_pose_theta_x)
}

// float commanded_tool_pose_theta_y = 39;
inline void BaseFeedback::clear_commanded_tool_pose_theta_y() {
  commanded_tool_pose_theta_y_ = 0;
}
inline float BaseFeedback::commanded_tool_pose_theta_y() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.commanded_tool_pose_theta_y)
  return commanded_tool_pose_theta_y_;
}
inline void BaseFeedback::set_commanded_tool_pose_theta_y(float value) {
  
  commanded_tool_pose_theta_y_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.commanded_tool_pose_theta_y)
}

// float commanded_tool_pose_theta_z = 40;
inline void BaseFeedback::clear_commanded_tool_pose_theta_z() {
  commanded_tool_pose_theta_z_ = 0;
}
inline float BaseFeedback::commanded_tool_pose_theta_z() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.BaseFeedback.commanded_tool_pose_theta_z)
  return commanded_tool_pose_theta_z_;
}
inline void BaseFeedback::set_commanded_tool_pose_theta_z(float value) {
  
  commanded_tool_pose_theta_z_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.BaseFeedback.commanded_tool_pose_theta_z)
}

// -------------------------------------------------------------------

// CustomData

// fixed32 frame_id = 1;
inline void CustomData::clear_frame_id() {
  frame_id_ = 0u;
}
inline ::google::protobuf::uint32 CustomData::frame_id() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.CustomData.frame_id)
  return frame_id_;
}
inline void CustomData::set_frame_id(::google::protobuf::uint32 value) {
  
  frame_id_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.CustomData.frame_id)
}

// fixed32 custom_data_0 = 2;
inline void CustomData::clear_custom_data_0() {
  custom_data_0_ = 0u;
}
inline ::google::protobuf::uint32 CustomData::custom_data_0() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.CustomData.custom_data_0)
  return custom_data_0_;
}
inline void CustomData::set_custom_data_0(::google::protobuf::uint32 value) {
  
  custom_data_0_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.CustomData.custom_data_0)
}

// fixed32 custom_data_1 = 3;
inline void CustomData::clear_custom_data_1() {
  custom_data_1_ = 0u;
}
inline ::google::protobuf::uint32 CustomData::custom_data_1() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.CustomData.custom_data_1)
  return custom_data_1_;
}
inline void CustomData::set_custom_data_1(::google::protobuf::uint32 value) {
  
  custom_data_1_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.CustomData.custom_data_1)
}

// fixed32 custom_data_2 = 4;
inline void CustomData::clear_custom_data_2() {
  custom_data_2_ = 0u;
}
inline ::google::protobuf::uint32 CustomData::custom_data_2() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.CustomData.custom_data_2)
  return custom_data_2_;
}
inline void CustomData::set_custom_data_2(::google::protobuf::uint32 value) {
  
  custom_data_2_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.CustomData.custom_data_2)
}

// fixed32 custom_data_3 = 5;
inline void CustomData::clear_custom_data_3() {
  custom_data_3_ = 0u;
}
inline ::google::protobuf::uint32 CustomData::custom_data_3() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.CustomData.custom_data_3)
  return custom_data_3_;
}
inline void CustomData::set_custom_data_3(::google::protobuf::uint32 value) {
  
  custom_data_3_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.CustomData.custom_data_3)
}

// fixed32 custom_data_4 = 6;
inline void CustomData::clear_custom_data_4() {
  custom_data_4_ = 0u;
}
inline ::google::protobuf::uint32 CustomData::custom_data_4() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.CustomData.custom_data_4)
  return custom_data_4_;
}
inline void CustomData::set_custom_data_4(::google::protobuf::uint32 value) {
  
  custom_data_4_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.CustomData.custom_data_4)
}

// fixed32 custom_data_5 = 7;
inline void CustomData::clear_custom_data_5() {
  custom_data_5_ = 0u;
}
inline ::google::protobuf::uint32 CustomData::custom_data_5() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.CustomData.custom_data_5)
  return custom_data_5_;
}
inline void CustomData::set_custom_data_5(::google::protobuf::uint32 value) {
  
  custom_data_5_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.CustomData.custom_data_5)
}

// fixed32 custom_data_6 = 8;
inline void CustomData::clear_custom_data_6() {
  custom_data_6_ = 0u;
}
inline ::google::protobuf::uint32 CustomData::custom_data_6() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.CustomData.custom_data_6)
  return custom_data_6_;
}
inline void CustomData::set_custom_data_6(::google::protobuf::uint32 value) {
  
  custom_data_6_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.CustomData.custom_data_6)
}

// fixed32 custom_data_7 = 9;
inline void CustomData::clear_custom_data_7() {
  custom_data_7_ = 0u;
}
inline ::google::protobuf::uint32 CustomData::custom_data_7() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.CustomData.custom_data_7)
  return custom_data_7_;
}
inline void CustomData::set_custom_data_7(::google::protobuf::uint32 value) {
  
  custom_data_7_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.CustomData.custom_data_7)
}

// repeated .Kinova.Api.BaseCyclic.ActuatorCustomData actuators_custom_data = 10;
inline int CustomData::actuators_custom_data_size() const {
  return actuators_custom_data_.size();
}
inline void CustomData::clear_actuators_custom_data() {
  actuators_custom_data_.Clear();
}
inline const ::Kinova::Api::BaseCyclic::ActuatorCustomData& CustomData::actuators_custom_data(int index) const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.CustomData.actuators_custom_data)
  return actuators_custom_data_.Get(index);
}
inline ::Kinova::Api::BaseCyclic::ActuatorCustomData* CustomData::mutable_actuators_custom_data(int index) {
  // @@protoc_insertion_point(field_mutable:Kinova.Api.BaseCyclic.CustomData.actuators_custom_data)
  return actuators_custom_data_.Mutable(index);
}
inline ::Kinova::Api::BaseCyclic::ActuatorCustomData* CustomData::add_actuators_custom_data() {
  // @@protoc_insertion_point(field_add:Kinova.Api.BaseCyclic.CustomData.actuators_custom_data)
  return actuators_custom_data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Kinova::Api::BaseCyclic::ActuatorCustomData >*
CustomData::mutable_actuators_custom_data() {
  // @@protoc_insertion_point(field_mutable_list:Kinova.Api.BaseCyclic.CustomData.actuators_custom_data)
  return &actuators_custom_data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Kinova::Api::BaseCyclic::ActuatorCustomData >&
CustomData::actuators_custom_data() const {
  // @@protoc_insertion_point(field_list:Kinova.Api.BaseCyclic.CustomData.actuators_custom_data)
  return actuators_custom_data_;
}

// .Kinova.Api.InterconnectCyclic.CustomData interconnect_custom_data = 11;
inline bool CustomData::has_interconnect_custom_data() const {
  return this != internal_default_instance() && interconnect_custom_data_ != NULL;
}
inline const ::Kinova::Api::InterconnectCyclic::CustomData& CustomData::interconnect_custom_data() const {
  const ::Kinova::Api::InterconnectCyclic::CustomData* p = interconnect_custom_data_;
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.CustomData.interconnect_custom_data)
  return p != NULL ? *p : *reinterpret_cast<const ::Kinova::Api::InterconnectCyclic::CustomData*>(
      &::Kinova::Api::InterconnectCyclic::_CustomData_default_instance_);
}
inline ::Kinova::Api::InterconnectCyclic::CustomData* CustomData::release_interconnect_custom_data() {
  // @@protoc_insertion_point(field_release:Kinova.Api.BaseCyclic.CustomData.interconnect_custom_data)
  
  ::Kinova::Api::InterconnectCyclic::CustomData* temp = interconnect_custom_data_;
  interconnect_custom_data_ = NULL;
  return temp;
}
inline ::Kinova::Api::InterconnectCyclic::CustomData* CustomData::mutable_interconnect_custom_data() {
  
  if (interconnect_custom_data_ == NULL) {
    interconnect_custom_data_ = new ::Kinova::Api::InterconnectCyclic::CustomData;
  }
  // @@protoc_insertion_point(field_mutable:Kinova.Api.BaseCyclic.CustomData.interconnect_custom_data)
  return interconnect_custom_data_;
}
inline void CustomData::set_allocated_interconnect_custom_data(::Kinova::Api::InterconnectCyclic::CustomData* interconnect_custom_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(interconnect_custom_data_);
  }
  if (interconnect_custom_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      interconnect_custom_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, interconnect_custom_data, submessage_arena);
    }
    
  } else {
    
  }
  interconnect_custom_data_ = interconnect_custom_data;
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.BaseCyclic.CustomData.interconnect_custom_data)
}

// -------------------------------------------------------------------

// Command

// fixed32 frame_id = 1;
inline void Command::clear_frame_id() {
  frame_id_ = 0u;
}
inline ::google::protobuf::uint32 Command::frame_id() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.Command.frame_id)
  return frame_id_;
}
inline void Command::set_frame_id(::google::protobuf::uint32 value) {
  
  frame_id_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.Command.frame_id)
}

// repeated .Kinova.Api.BaseCyclic.ActuatorCommand actuators = 2;
inline int Command::actuators_size() const {
  return actuators_.size();
}
inline void Command::clear_actuators() {
  actuators_.Clear();
}
inline const ::Kinova::Api::BaseCyclic::ActuatorCommand& Command::actuators(int index) const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.Command.actuators)
  return actuators_.Get(index);
}
inline ::Kinova::Api::BaseCyclic::ActuatorCommand* Command::mutable_actuators(int index) {
  // @@protoc_insertion_point(field_mutable:Kinova.Api.BaseCyclic.Command.actuators)
  return actuators_.Mutable(index);
}
inline ::Kinova::Api::BaseCyclic::ActuatorCommand* Command::add_actuators() {
  // @@protoc_insertion_point(field_add:Kinova.Api.BaseCyclic.Command.actuators)
  return actuators_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Kinova::Api::BaseCyclic::ActuatorCommand >*
Command::mutable_actuators() {
  // @@protoc_insertion_point(field_mutable_list:Kinova.Api.BaseCyclic.Command.actuators)
  return &actuators_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Kinova::Api::BaseCyclic::ActuatorCommand >&
Command::actuators() const {
  // @@protoc_insertion_point(field_list:Kinova.Api.BaseCyclic.Command.actuators)
  return actuators_;
}

// .Kinova.Api.InterconnectCyclic.Command interconnect = 3;
inline bool Command::has_interconnect() const {
  return this != internal_default_instance() && interconnect_ != NULL;
}
inline const ::Kinova::Api::InterconnectCyclic::Command& Command::interconnect() const {
  const ::Kinova::Api::InterconnectCyclic::Command* p = interconnect_;
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.Command.interconnect)
  return p != NULL ? *p : *reinterpret_cast<const ::Kinova::Api::InterconnectCyclic::Command*>(
      &::Kinova::Api::InterconnectCyclic::_Command_default_instance_);
}
inline ::Kinova::Api::InterconnectCyclic::Command* Command::release_interconnect() {
  // @@protoc_insertion_point(field_release:Kinova.Api.BaseCyclic.Command.interconnect)
  
  ::Kinova::Api::InterconnectCyclic::Command* temp = interconnect_;
  interconnect_ = NULL;
  return temp;
}
inline ::Kinova::Api::InterconnectCyclic::Command* Command::mutable_interconnect() {
  
  if (interconnect_ == NULL) {
    interconnect_ = new ::Kinova::Api::InterconnectCyclic::Command;
  }
  // @@protoc_insertion_point(field_mutable:Kinova.Api.BaseCyclic.Command.interconnect)
  return interconnect_;
}
inline void Command::set_allocated_interconnect(::Kinova::Api::InterconnectCyclic::Command* interconnect) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(interconnect_);
  }
  if (interconnect) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      interconnect = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, interconnect, submessage_arena);
    }
    
  } else {
    
  }
  interconnect_ = interconnect;
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.BaseCyclic.Command.interconnect)
}

// -------------------------------------------------------------------

// Feedback

// fixed32 frame_id = 1;
inline void Feedback::clear_frame_id() {
  frame_id_ = 0u;
}
inline ::google::protobuf::uint32 Feedback::frame_id() const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.Feedback.frame_id)
  return frame_id_;
}
inline void Feedback::set_frame_id(::google::protobuf::uint32 value) {
  
  frame_id_ = value;
  // @@protoc_insertion_point(field_set:Kinova.Api.BaseCyclic.Feedback.frame_id)
}

// .Kinova.Api.BaseCyclic.BaseFeedback base = 2;
inline bool Feedback::has_base() const {
  return this != internal_default_instance() && base_ != NULL;
}
inline void Feedback::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) {
    delete base_;
  }
  base_ = NULL;
}
inline const ::Kinova::Api::BaseCyclic::BaseFeedback& Feedback::base() const {
  const ::Kinova::Api::BaseCyclic::BaseFeedback* p = base_;
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.Feedback.base)
  return p != NULL ? *p : *reinterpret_cast<const ::Kinova::Api::BaseCyclic::BaseFeedback*>(
      &::Kinova::Api::BaseCyclic::_BaseFeedback_default_instance_);
}
inline ::Kinova::Api::BaseCyclic::BaseFeedback* Feedback::release_base() {
  // @@protoc_insertion_point(field_release:Kinova.Api.BaseCyclic.Feedback.base)
  
  ::Kinova::Api::BaseCyclic::BaseFeedback* temp = base_;
  base_ = NULL;
  return temp;
}
inline ::Kinova::Api::BaseCyclic::BaseFeedback* Feedback::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::Kinova::Api::BaseCyclic::BaseFeedback;
  }
  // @@protoc_insertion_point(field_mutable:Kinova.Api.BaseCyclic.Feedback.base)
  return base_;
}
inline void Feedback::set_allocated_base(::Kinova::Api::BaseCyclic::BaseFeedback* base) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete base_;
  }
  if (base) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.BaseCyclic.Feedback.base)
}

// repeated .Kinova.Api.BaseCyclic.ActuatorFeedback actuators = 3;
inline int Feedback::actuators_size() const {
  return actuators_.size();
}
inline void Feedback::clear_actuators() {
  actuators_.Clear();
}
inline const ::Kinova::Api::BaseCyclic::ActuatorFeedback& Feedback::actuators(int index) const {
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.Feedback.actuators)
  return actuators_.Get(index);
}
inline ::Kinova::Api::BaseCyclic::ActuatorFeedback* Feedback::mutable_actuators(int index) {
  // @@protoc_insertion_point(field_mutable:Kinova.Api.BaseCyclic.Feedback.actuators)
  return actuators_.Mutable(index);
}
inline ::Kinova::Api::BaseCyclic::ActuatorFeedback* Feedback::add_actuators() {
  // @@protoc_insertion_point(field_add:Kinova.Api.BaseCyclic.Feedback.actuators)
  return actuators_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Kinova::Api::BaseCyclic::ActuatorFeedback >*
Feedback::mutable_actuators() {
  // @@protoc_insertion_point(field_mutable_list:Kinova.Api.BaseCyclic.Feedback.actuators)
  return &actuators_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Kinova::Api::BaseCyclic::ActuatorFeedback >&
Feedback::actuators() const {
  // @@protoc_insertion_point(field_list:Kinova.Api.BaseCyclic.Feedback.actuators)
  return actuators_;
}

// .Kinova.Api.InterconnectCyclic.Feedback interconnect = 4;
inline bool Feedback::has_interconnect() const {
  return this != internal_default_instance() && interconnect_ != NULL;
}
inline const ::Kinova::Api::InterconnectCyclic::Feedback& Feedback::interconnect() const {
  const ::Kinova::Api::InterconnectCyclic::Feedback* p = interconnect_;
  // @@protoc_insertion_point(field_get:Kinova.Api.BaseCyclic.Feedback.interconnect)
  return p != NULL ? *p : *reinterpret_cast<const ::Kinova::Api::InterconnectCyclic::Feedback*>(
      &::Kinova::Api::InterconnectCyclic::_Feedback_default_instance_);
}
inline ::Kinova::Api::InterconnectCyclic::Feedback* Feedback::release_interconnect() {
  // @@protoc_insertion_point(field_release:Kinova.Api.BaseCyclic.Feedback.interconnect)
  
  ::Kinova::Api::InterconnectCyclic::Feedback* temp = interconnect_;
  interconnect_ = NULL;
  return temp;
}
inline ::Kinova::Api::InterconnectCyclic::Feedback* Feedback::mutable_interconnect() {
  
  if (interconnect_ == NULL) {
    interconnect_ = new ::Kinova::Api::InterconnectCyclic::Feedback;
  }
  // @@protoc_insertion_point(field_mutable:Kinova.Api.BaseCyclic.Feedback.interconnect)
  return interconnect_;
}
inline void Feedback::set_allocated_interconnect(::Kinova::Api::InterconnectCyclic::Feedback* interconnect) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(interconnect_);
  }
  if (interconnect) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      interconnect = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, interconnect, submessage_arena);
    }
    
  } else {
    
  }
  interconnect_ = interconnect;
  // @@protoc_insertion_point(field_set_allocated:Kinova.Api.BaseCyclic.Feedback.interconnect)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace BaseCyclic
}  // namespace Api
}  // namespace Kinova

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Kinova::Api::BaseCyclic::ServiceVersion> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Kinova::Api::BaseCyclic::ServiceVersion>() {
  return ::Kinova::Api::BaseCyclic::ServiceVersion_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BaseCyclic_2eproto__INCLUDED
